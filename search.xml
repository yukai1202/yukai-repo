<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodejs中的cluster</title>
      <link href="/2020/08/11/node2/"/>
      <url>/2020/08/11/node2/</url>
      
        <content type="html"><![CDATA[<h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><p>js是单线程的，为了利用多核系统，启动一个Node.js进程集群来处理负载。</p><p>cluster模块允许创建所有共享服务器端口的子进程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fork workers.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">    cluster.fork();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.on(<span class="string">'exit'</span>, (worker, code, signal) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Workers can share any TCP connection</span></span><br><span class="line">  <span class="comment">// In this case it is an HTTP server</span></span><br><span class="line">  http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(<span class="string">'hello world\n'</span>);</span><br><span class="line">  &#125;).listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$ node server.js</span></span><br><span class="line"><span class="comment">// Master 3596 is running</span></span><br><span class="line"><span class="comment">// Worker 4324 started</span></span><br><span class="line"><span class="comment">// Worker 4520 started</span></span><br><span class="line"><span class="comment">// Worker 6056 started</span></span><br><span class="line"><span class="comment">// Worker 5644 started</span></span><br></pre></td></tr></table></figure><p>实际上master进程是通过child_process.fork()方法创建的子进程，因此可以通过Ipc来通实现父进程和子进程的通信，并传递server句柄。<br>cluster模块支持两种方法来分配客户端的请求。</p><ol><li><p>轮训（除了windows平台，其他平台都是默认该选项）,主进程监听一个端口，接受客户端请求，以轮训的方式将它们分发给所有的子进程，并且会通过算法来避免所有请求都压到一个子进程上。官网说，这个性能很好。</p></li><li><p>主进程创建listen socket，然后把该句柄发送给子进程，然后子进程直接接收客户端请求。</p></li></ol><p>理论上，第二种方法应该具有最好的性能。但是在实践中，由于操作系统调度器的异常，分发往往非常不平衡，测试中发现在总共8个进程中，超过70%的连接只在两个进程中处理并结束</p><p>因为 server.listen() 将大部分工作交给主进程完成，因此导致普通 Node.js 进程与 cluster 工作进程差异的情况有三种：</p><ol><li>server.listen({fd: 7}) 因为消息会被传给主进程，所以父进程中的文件描述符 7 将会被监听并将句柄传给工作进程，而不是监听文件描述符 7 指向的工作进程。</li><li><ol start="3"><li>server.listen(handle) 显式地监听句柄，会导致工作进程直接使用该句柄，而不是和主进程通信。<br>server.listen(0) 正常情况下，这种调用会导致 server 在随机端口上监听。 但在 cluster 模式中，所有工作进程每次调用 listen(0) 时会收到相同的“随机”端口。 实质上，这种端口只在第一次分配时随机，之后就变得可预料。 如果要使用独立端口的话，应该根据工作进程的 ID 来生成端口号。</li></ol></li></ol><p>Node.js 不支持路由逻辑。 因此在设计应用时，不应该过分依赖内存数据对象，例如 session 和登陆等。</p><p>由于各工作进程是独立的进程，它们可以根据需要随时关闭或重新生成，而不影响其他进程的正常运行。 只要有存活的工作进程，服务器就可以继续处理连接。 如果没有存活的工作进程，现有连接会丢失，新的连接也会被拒绝。 Node.js 不会自动管理工作进程的数量，而应该由具体的应用根据实际需要来管理进程池。</p><p>虽然 cluster 模块主要用于网络相关的情况，但同样可以用于其他需要工作进程的情况。</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nodejs中的child process</title>
      <link href="/2020/08/11/node1/"/>
      <url>/2020/08/11/node1/</url>
      
        <content type="html"><![CDATA[<h1 id="Child-process"><a href="#Child-process" class="headerlink" title="Child process"></a>Child process</h1><p>child_process是nodejs中的一个内置模块，该模块提供了创建子进程的能力，默认情况下父进程和子进程之间会建立stdin、stdout和stderr的管道。这些管道会有容量限制，如果子进程写入到stdout的量超过了这个限制而没有捕获输出，子进程将阻塞，等待管道缓冲区接受更多数据。如果不需要使用子进程的output可以使用{ stdio: ‘ignore’ } </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> ls = spawn(<span class="string">'ls'</span>, [<span class="string">'-lh'</span>, <span class="string">'/usr'</span>]);</span><br><span class="line"></span><br><span class="line">ls.stdout.on(<span class="string">'data'</span>, (data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ls.stderr.on(<span class="string">'data'</span>, (data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ls.on(<span class="string">'close'</span>, (code) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`child process exited with code <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>child_process模块除了spawn还提供了一些其他方法用来同步或者异步创建子进程，异步创建的子进程不会阻塞nodejs的事件循环，同步创建的子进程会阻塞事件循环直到子进程退出或者终止。child_process提供了一些如下方法：</p><ul><li><p>child_process.spawn(): 使用指定的命令行参数创建新进程</p></li><li><p>child_process.exec(): 生成一个shell并在该shell中运行命令，完成后将stdout和stderr传递给回调函数。</p></li><li><p>child_process.execFile(): 类似于子进程.exec()，不同之处是它直接生成命令，默认情况下不首先生成shell。</p></li><li><p>child_process.fork(): 生成一个新的Node.js进程，并通过建立IPC通信通道调用指定的模块，该通道允许在父节点和子节点之间发送消息。</p></li><li><p>child_process.execSync(): exec同步版本，将阻塞Node.js事件循环</p></li><li><p>child_process.execFileSync(): execFile同步版本，将阻塞Node.js事件循环</p></li><li><p>child_process.spawnSync(): spawn同步版本，使用指定的命令行参数创建新进程</p></li></ul><h1 id="异步进程的创建"><a href="#异步进程的创建" class="headerlink" title="异步进程的创建"></a>异步进程的创建</h1><p>使用异步方法 child_process.spawn(), child_process.fork(), child_process.exec(), and child_process.execFile()创建子进程，会返回一个ChildProcess子进程的实例，这些实例对实现了Nodejs EventEmit API，因此允许父进程注册在子进程生命周期中发生某些事件时调用的侦听器函数。</p><p>child_process.exec() 和 child_process.execFile() 这两个方法会额外添加一个可选的回调函数，该回调可以在子进程终止时调用。</p><h1 id="exec和execFile"><a href="#exec和execFile" class="headerlink" title="exec和execFile"></a>exec和execFile</h1><p>child_process.exec()和child_process.execFile()在不同平台会有不一样的结果。在unit类型的操作系统中，execFile更有效，因为默认不会创建一个shell。但是在windows平台下，.bat和.cmd必须要依赖一个终端才能运行，所以使用execFile并不能运行他们，所以在windows中，可以改用spawn(需要指定shell参数), exec。注意，如果脚本文件名包含空格，则需要用引号括起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// On Windows Only...</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> bat = spawn(<span class="string">'cmd.exe'</span>, [<span class="string">'/c'</span>, <span class="string">'my.bat'</span>]);</span><br><span class="line"></span><br><span class="line">bat.stdout.on(<span class="string">'data'</span>, (data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bat.stderr.on(<span class="string">'data'</span>, (data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bat.on(<span class="string">'exit'</span>, (code) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Child exited with code <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR...</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec, spawn &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line">exec(<span class="string">'my.bat'</span>, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(stdout);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Script with spaces in the filename:</span></span><br><span class="line"><span class="keyword">const</span> bat = spawn(<span class="string">'"my script.cmd"'</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>], &#123; <span class="attr">shell</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">// or:</span></span><br><span class="line">exec(<span class="string">'"my script.cmd" a b'</span>, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果需要支持async await，需要使用util模块提供的util.promisify方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> exec = util.promisify(<span class="built_in">require</span>(<span class="string">'child_process'</span>).exec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">lsExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; stdout, stderr &#125; = <span class="keyword">await</span> exec(<span class="string">'ls'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'stdout:'</span>, stdout);</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'stderr:'</span>, stderr);</span><br><span class="line">&#125;</span><br><span class="line">lsExample();</span><br></pre></td></tr></table></figure><h1 id="child-process-fork"><a href="#child-process-fork" class="headerlink" title="child_process.fork"></a>child_process.fork</h1><p>child_process.fork(modulePath[, args][, options])<br>fork是一种特殊的spawn，专门用于生成新的Node.js进程。使用fork创建的子进程，会返回一个子进程实例，这个实例会创建自己的通信管道（IPC），来实现父进程和子进程之间的通信。注意创建的子进程会有自己的内存和和v8实例。<br>默认情况下，fork会使用父进程的process.execPath创建一个进程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parent.js</span></span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</span><br><span class="line"><span class="keyword">const</span> n = cp.fork(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/child.js`</span>);</span><br><span class="line"></span><br><span class="line">n.on(<span class="string">"message"</span>, (m) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"PARENT got message:"</span>, m);</span><br><span class="line">&#125;);</span><br><span class="line">n.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"child process exit"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">n.send(&#123; <span class="attr">hello</span>: <span class="string">"world"</span>,<span class="attr">val</span>: n.pid &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//child.js</span></span><br><span class="line">process.on(<span class="string">'message'</span>, (m) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'CHILD got message:'</span>, m);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Causes the parent to print: PARENT got message: &#123; foo: 'bar', baz: null &#125;</span></span><br><span class="line">process.send(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="literal">NaN</span> &#125;);</span><br></pre></td></tr></table></figure><p>再来看一个将父组件的server句柄传递给子进程的办法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> subprocess = <span class="built_in">require</span>(<span class="string">"child_process"</span>).fork(<span class="string">"child.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">"net"</span>).createServer();</span><br><span class="line">server.on(<span class="string">"connection"</span>, (socket) =&gt; &#123;</span><br><span class="line">  socket.end(<span class="string">"handled by parent"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">1337</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"tests"</span>);</span><br><span class="line">  subprocess.send(<span class="string">"server"</span>, server);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">///child.js</span></span><br><span class="line"></span><br><span class="line">process.on(<span class="string">"message"</span>, (m, server) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (m === <span class="string">"server"</span>) &#123;</span><br><span class="line">    server.on(<span class="string">"connection"</span>, (socket) =&gt; &#123;</span><br><span class="line">      socket.end(<span class="string">"handled by child"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>pm2也就是使用fork创建子进程，子进程如果退出或终止，触发close，继续创建子进程。</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react学习之旅5 redux react-redux redux-saga</title>
      <link href="/2020/07/30/react5/"/>
      <url>/2020/07/30/react5/</url>
      
        <content type="html"><![CDATA[<h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>Redux 对 javascript 来说其实就是一个可以预测状态的容器，他不仅可以与 react 一起使用，也可以与任何其他视图库一起使用，redux 很小(2kB，包括依赖项)，但有一个很大的插件生态系统。</p><p>redux 官方提供了两个库，一个是 redux core 核心库 和 Redux Toolkit，Redux Toolkit 是官方推荐用于编写 Redux 逻辑的方法，包含一些实用工具，可以帮助简化许多常见用例，包括存储设置、创建缩减器和编写不可变的更新逻辑，甚至一次性创建整个状态“片段”。</p><p>另外如果使用 create-react-app，可以使用如下命令引入 redux，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app --template redux</span><br></pre></td></tr></table></figure><p>我们先来看下单独使用 redux 的例子，只安装 redux</p><p>创建 Index.js 并使用 node index.js 看下结果，因为使用的是 es6+的语法，所以直接运行会出错，需要借助 babel-cli，安装如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line"><span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候运行 npx babel-node index.js 就可以运行了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"INCREMENT"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"DECREMENT"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(counter);</span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()));</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"INCREMENT"</span> &#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"INCREMENT"</span> &#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"DECREMENT"</span> &#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>从例子中我们可以看到，要获取更新后的 store, 不是直接改变状态，而是通过称为 actions 的普通对象发生的改变。然后编写一个称为 reducer 的特殊函数来决定每个操作应该返回什么状态。在实际应用中，我们可以编写更多的 reducer 来维护不同的状态</p><blockquote><p>Redux 动机</p></blockquote><p>动机其实很简单，就是为了解决组件或模块之前共享状态的问题，以及对一个特别复杂的状态数，进行拆分。</p><blockquote><p>Redux 核心概念</p></blockquote><p>假设 app 的状态可以用以下状态来描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">todos: [&#123;</span><br><span class="line">  text: <span class="string">'Eat food'</span>,</span><br><span class="line">  completed: <span class="literal">true</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  text: <span class="string">'Exercise'</span>,</span><br><span class="line">  completed: <span class="literal">false</span></span><br><span class="line">&#125;],</span><br><span class="line">visibilityFilter: <span class="string">'SHOW_COMPLETED'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后为了修改状态中的值，我们编写一些 action，action 可以描述所要发生的事情</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>, <span class="attr">text</span>: <span class="string">'Go to swimming pool'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'TOGGLE_TODO'</span>, <span class="attr">index</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'SET_VISIBILITY_FILTER'</span>, <span class="attr">filter</span>: <span class="string">'SHOW_ALL'</span> &#125;</span><br></pre></td></tr></table></figure><p>可以看到如果将每一个变化都描述为一个动作，这让我们清楚地了解应用程序中会发生什么。如果某件事发生了变化，我们知道它为什么发生了变化。最后，为了将状态和动作联系在一起，我们编写了一个称为 reducer 的函数。reducer 只是一个函数，以状态和动作作为参数，并返回应用程序的下一个状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = <span class="string">"SHOW_ALL"</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">"SET_VISIBILITY_FILTER"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> action.filter;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ADD_TODO"</span>:</span><br><span class="line">      <span class="keyword">return</span> state.concat([&#123; <span class="attr">text</span>: action.text, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"TOGGLE_TODO"</span>:</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span></span><br><span class="line">        action.index === index</span><br><span class="line">          ? &#123; <span class="attr">text</span>: todo.text, <span class="attr">completed</span>: !todo.completed &#125;</span><br><span class="line">          : todo</span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们编写另一个 reducer，通过调用这两个 reducer 以获取相应的状态键来管理应用程序的完整状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    todos: todos(state.todos, action),</span><br><span class="line">    visibilityFilter: visibilityFilter(state.visibilityFilter, action),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是 Redux 的基本思想，没有使用任何 Redux api。主要是, 描述你的状态来更新要操作对象, 并且 90%的代码编写只是纯 JavaScript,没有使用 redux 本身或 API。</p><blockquote><p>redux 三个原则</p></blockquote><p>Redux 可以用三个基本原理来描述</p><ol><li>单一数据源，应用程序的全局状态存储在单个存储中的对象树中。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(store.getState());</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//  visibilityFilter: 'SHOW_ALL',</span></span><br><span class="line"><span class="comment">//  todos: [</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//      text: 'Consider using Redux',</span></span><br><span class="line"><span class="comment">//      completed: true,</span></span><br><span class="line"><span class="comment">//    &#125;,</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//      text: 'Keep all state in a single tree',</span></span><br><span class="line"><span class="comment">//      completed: false</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//  ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>状态是只读的</li></ol><p>所以，改变状态的唯一方法是发出一个 action，一个描述所发生的事情的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">"COMPLETE_TODO"</span>,</span><br><span class="line">  index: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">"SET_VISIBILITY_FILTER"</span>,</span><br><span class="line">  filter: <span class="string">"SHOW_COMPLETED"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用纯函数进行更改<br>要指定如何通过 action 转换状态树，可以编写存 reducers。</li></ol><p>看完了 redux，我们来看下 react-redux</p><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><p>React Redux 是 react 的官方库用来集成 react 和 redux。安装如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux react-redux</span><br></pre></td></tr></table></figure><p>react redux 一些基本概念</p><blockquote><p>Provider</p></blockquote><p>react redux 提供了一个 provider，使得整个应用程序访问 store 非常方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  rootElement</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><blockquote><p>connect</p></blockquote><p>React Redux 提供的一个 connect 方法 用来连接组件和状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; increment, decrement, reset &#125; <span class="keyword">from</span> <span class="string">"./actionCreators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const Counter = ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state <span class="regexp">/*, ownProps*/</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: state.counter,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123; increment, decrement, reset &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Counter);</span><br></pre></td></tr></table></figure><p>到目前为止，我们看到的 redux 操作，从 action 到 reducer, 返回 state, 都是同步操作，现实中很多都 action 是需要异步操作获取新的 state，这就需要借助 redux-saga 来帮助我们实现。</p><h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h3><p>redux-saga 是一个 redux 中间件库，它被设计用来处理 redux 应用程序。它通过利用 ES6 的一个称为 generator 的特性来实现这一点，该特性允许我们编写看起来同步的、非常容易测试的异步代码。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  onSomeButtonClicked() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; userId, dispatch &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    dispatch(&#123;<span class="attr">type</span>: <span class="string">'USER_FETCH_REQUESTED'</span>, <span class="attr">payload</span>: &#123;userId&#125;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击按钮，dispatch 一个 action 来调用 reducer，和 react-redux 不同的是，这里我们需要编写一个 saga.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery, takeLatest &#125; <span class="keyword">from</span> <span class="string">"redux-saga/effects"</span>;</span><br><span class="line"><span class="keyword">import</span> Api <span class="keyword">from</span> <span class="string">"..."</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchUser</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">yield</span> call(Api.fetchUser, action.payload.userId);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">"USER_FETCH_SUCCEEDED"</span>, <span class="attr">user</span>: user &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">"USER_FETCH_FAILED"</span>, <span class="attr">message</span>: e.message &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeEvery(<span class="string">"USER_FETCH_REQUESTED"</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure><p>而 main.js 需要配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">"redux-saga"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line"><span class="keyword">import</span> mySaga <span class="keyword">from</span> <span class="string">"./sagas"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware));</span><br><span class="line">sagaMiddleware.run(mySaga);</span><br></pre></td></tr></table></figure><p>可以看出来，前面 action type 为 USER_FETCH_REQUESTED，会被 saga 所监听，在内部处理完异步操作后，调用 put，类似于 dispatch，再进入到用户编写的 reducer，从而获得要转换的 store。这就是 redux-saga 所做的事情。</p><p>在 redux-saga 中，每个 api 操作都称为一个 effect，主要包含如下几个：<br>take, put, call, fork, cancel, cancelled, delay , 具体使用方式可以参考文档 <a href="https://redux-saga-in-chinese.js.org/docs/api/" target="_blank" rel="noopener">redux-saga</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react学习之旅4 router</title>
      <link href="/2020/07/29/react4/"/>
      <url>/2020/07/29/react4/</url>
      
        <content type="html"><![CDATA[<p>react 中路由组件用的最多的就是 react-router-dom<br>安装 router 模块：<br>npm install react-router-dom</p><p>看看最简单的 demo：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route, Switch &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> component=&#123;Home&#125; exact /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/shop"</span> component=&#123;Shop&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/m</span>ain&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/BrowserRouter&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>接下来具体讲讲该路由组件都有哪些功能。</p><blockquote><p>URL 传参</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/about/:id"</span> component=&#123; ...&#125; /&gt;</span><br><span class="line">&lt;Route path=<span class="string">"/about/:id*"</span> component=&#123;...&#125; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>嵌套路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  useParams,</span><br><span class="line">  useRouteMatch,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Since routes are regular React components, they</span></span><br><span class="line"><span class="comment">// may be rendered anywhere in the app, including in</span></span><br><span class="line"><span class="comment">// child elements.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This helps when it's time to code-split your app</span></span><br><span class="line"><span class="comment">// into multiple bundles because code-splitting a</span></span><br><span class="line"><span class="comment">// React Router app is the same as code-splitting</span></span><br><span class="line"><span class="comment">// any other React app.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">NestingExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/topics"</span>&gt;Topics&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;hr /</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">"/"</span>&gt;</span><br><span class="line">            &lt;Home /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/</span>topics<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Topics /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Home() &#123;</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Topics() &#123;</span></span><br><span class="line"><span class="string">  // The `path` lets us build &lt;Route&gt; paths that are</span></span><br><span class="line"><span class="string">  // relative to the parent route, while the `url` lets</span></span><br><span class="line"><span class="string">  // us build relative links.</span></span><br><span class="line"><span class="string">  let &#123; path, url &#125; = useRouteMatch();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to=&#123;`$&#123;url&#125;/rendering`&#125;&gt;Rendering with React&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to=&#123;`$&#123;url&#125;/components`&#125;&gt;Components&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to=&#123;`$&#123;url&#125;/props-v-state`&#125;&gt;Props v. State&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;Route exact path=&#123;path&#125;&gt;</span></span><br><span class="line"><span class="string">          &lt;h3&gt;Please select a topic.&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path=&#123;`$&#123;path&#125;/:topicId`&#125;&gt;</span></span><br><span class="line"><span class="string">          &lt;Topic /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Topic() &#123;</span></span><br><span class="line"><span class="string">  // The &lt;Route&gt; that rendered this component has a</span></span><br><span class="line"><span class="string">  // path of `/topics/:topicId`. The `:topicId` portion</span></span><br><span class="line"><span class="string">  // of the URL indicates a placeholder that we can</span></span><br><span class="line"><span class="string">  // get from `useParams()`.</span></span><br><span class="line"><span class="string">  let &#123; topicId &#125; = useParams();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;&#123;topicId&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>Redirect (Auth)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Redirect,</span><br><span class="line">  useHistory,</span><br><span class="line">  useLocation,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This example has 3 pages: a public page, a protected</span></span><br><span class="line"><span class="comment">// page, and a login screen. In order to see the protected</span></span><br><span class="line"><span class="comment">// page, you must first login. Pretty standard stuff.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// First, visit the public page. Then, visit the protected</span></span><br><span class="line"><span class="comment">// page. You're not yet logged in, so you are redirected</span></span><br><span class="line"><span class="comment">// to the login page. After you login, you are redirected</span></span><br><span class="line"><span class="comment">// back to the protected page.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Notice the URL change each time. If you click the back</span></span><br><span class="line"><span class="comment">// button at this point, would you expect to go back to the</span></span><br><span class="line"><span class="comment">// login page? No! You're already logged in. Try it out,</span></span><br><span class="line"><span class="comment">// and you'll see you go back to the page you visited</span></span><br><span class="line"><span class="comment">// just *before* logging in, the public page.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">AuthExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;AuthButton /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/public"</span>&gt;Public Page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/protected"</span>&gt;Protected Page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/</span>public<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;PublicPage /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/login<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;LoginPage /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;PrivateRoute path="</span>/protected<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;ProtectedPage /&gt;</span></span><br><span class="line"><span class="string">          &lt;/PrivateRoute&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const fakeAuth = &#123;</span></span><br><span class="line"><span class="string">  isAuthenticated: false,</span></span><br><span class="line"><span class="string">  authenticate(cb) &#123;</span></span><br><span class="line"><span class="string">    fakeAuth.isAuthenticated = true;</span></span><br><span class="line"><span class="string">    setTimeout(cb, 100); // fake async</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  signout(cb) &#123;</span></span><br><span class="line"><span class="string">    fakeAuth.isAuthenticated = false;</span></span><br><span class="line"><span class="string">    setTimeout(cb, 100);</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function AuthButton() &#123;</span></span><br><span class="line"><span class="string">  let history = useHistory();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return fakeAuth.isAuthenticated ? (</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">      Welcome!&#123;"</span> <span class="string">"&#125;</span></span><br><span class="line"><span class="string">      &lt;button</span></span><br><span class="line"><span class="string">        onClick=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="string">          fakeAuth.signout(() =&gt; history.push("</span>/<span class="string">"));</span></span><br><span class="line"><span class="string">        &#125;&#125;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        Sign out</span></span><br><span class="line"><span class="string">      &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">  ) : (</span></span><br><span class="line"><span class="string">    &lt;p&gt;You are not logged in.&lt;/p&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// A wrapper for &lt;Route&gt; that redirects to the login</span></span><br><span class="line"><span class="string">// screen if you're not yet authenticated.</span></span><br><span class="line"><span class="string">function PrivateRoute(&#123; children, ...rest &#125;) &#123;</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;Route</span></span><br><span class="line"><span class="string">      &#123;...rest&#125;</span></span><br><span class="line"><span class="string">      render=&#123;(&#123; location &#125;) =&gt;</span></span><br><span class="line"><span class="string">        fakeAuth.isAuthenticated ? (</span></span><br><span class="line"><span class="string">          children</span></span><br><span class="line"><span class="string">        ) : (</span></span><br><span class="line"><span class="string">          &lt;Redirect</span></span><br><span class="line"><span class="string">            to=&#123;&#123;</span></span><br><span class="line"><span class="string">              pathname: "</span>/login<span class="string">",</span></span><br><span class="line"><span class="string">              state: &#123; from: location &#125;,</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string">          /&gt;</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    /&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function PublicPage() &#123;</span></span><br><span class="line"><span class="string">  return &lt;h3&gt;Public&lt;/h3&gt;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function ProtectedPage() &#123;</span></span><br><span class="line"><span class="string">  return &lt;h3&gt;Protected&lt;/h3&gt;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function LoginPage() &#123;</span></span><br><span class="line"><span class="string">  let history = useHistory();</span></span><br><span class="line"><span class="string">  let location = useLocation();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  let &#123; from &#125; = location.state || &#123; from: &#123; pathname: "</span>/<span class="string">" &#125; &#125;;</span></span><br><span class="line"><span class="string">  let login = () =&gt; &#123;</span></span><br><span class="line"><span class="string">    fakeAuth.authenticate(() =&gt; &#123;</span></span><br><span class="line"><span class="string">      history.replace(from);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;You must log in to view the page at &#123;from.pathname&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button onClick=&#123;login&#125;&gt;Log in&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>custom link</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  useRouteMatch,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This example show how you could create a custom</span></span><br><span class="line"><span class="comment">// &lt;Link&gt; that renders something special when the URL</span></span><br><span class="line"><span class="comment">// is the same as the one the &lt;Link&gt; points to.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">CustomLinkExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;OldSchoolMenuLink activeOnlyWhenExact=&#123;<span class="literal">true</span>&#125; to=<span class="string">"/"</span> label=<span class="string">"Home"</span> /&gt;</span><br><span class="line">        &lt;OldSchoolMenuLink to=<span class="string">"/about"</span> label=<span class="string">"About"</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">"/"</span>&gt;</span><br><span class="line">            &lt;Home /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/</span>about<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;About /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function OldSchoolMenuLink(&#123; label, to, activeOnlyWhenExact &#125;) &#123;</span></span><br><span class="line"><span class="string">  let match = useRouteMatch(&#123;</span></span><br><span class="line"><span class="string">    path: to,</span></span><br><span class="line"><span class="string">    exact: activeOnlyWhenExact,</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div className=&#123;match ? "</span>active<span class="string">" : "</span><span class="string">"&#125;&gt;</span></span><br><span class="line"><span class="string">      &#123;match &amp;&amp; "</span>&gt; <span class="string">"&#125;</span></span><br><span class="line"><span class="string">      &lt;Link to=&#123;to&#125;&gt;&#123;label&#125;&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Home() &#123;</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;Home&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function About() &#123;</span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;About&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>目前为止需要注意的地方：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> exact children=&#123;&lt;BlockingForm /&gt;&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/one"</span> children=&#123;&lt;h3&gt;One&lt;<span class="regexp">/h3&gt;&#125; /</span>&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/one1"</span> component=&#123;Two&#125; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Route path=<span class="string">"/two"</span>&gt;</span><br><span class="line">    &lt;Two /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Switch&gt;</span><br></pre></td></tr></table></figure><blockquote><p>prevention transition, prompt confirm</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Prompt,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sometimes you want to prevent the user from</span></span><br><span class="line"><span class="comment">// navigating away from a page. The most common</span></span><br><span class="line"><span class="comment">// use case is when they have entered some data</span></span><br><span class="line"><span class="comment">// into a form but haven't submitted it yet, and</span></span><br><span class="line"><span class="comment">// you don't want them to lose it.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">PreventingTransitionsExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/"</span>&gt;Form&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/one"</span>&gt;One&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/two"</span>&gt;Two&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/</span><span class="string">" exact children=&#123;&lt;BlockingForm /&gt;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/one<span class="string">" children=&#123;&lt;h3&gt;One&lt;/h3&gt;&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/two<span class="string">" children=&#123;&lt;h3&gt;Two&lt;/h3&gt;&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function BlockingForm() &#123;</span></span><br><span class="line"><span class="string">  let [isBlocking, setIsBlocking] = useState(false);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;form</span></span><br><span class="line"><span class="string">      onSubmit=&#123;(event) =&gt; &#123;</span></span><br><span class="line"><span class="string">        event.preventDefault();</span></span><br><span class="line"><span class="string">        event.target.reset();</span></span><br><span class="line"><span class="string">        setIsBlocking(false);</span></span><br><span class="line"><span class="string">      &#125;&#125;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">      &lt;Prompt</span></span><br><span class="line"><span class="string">        when=&#123;isBlocking&#125;</span></span><br><span class="line"><span class="string">        message=&#123;(location) =&gt;</span></span><br><span class="line"><span class="string">          `Are you sure you want to go to $&#123;location.pathname&#125;`</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        Blocking? &#123;isBlocking ? "</span>Yes, click a link or the back button<span class="string">" : "</span>Nope<span class="string">"&#125;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;input</span></span><br><span class="line"><span class="string">          size="</span><span class="number">50</span><span class="string">"</span></span><br><span class="line"><span class="string">          placeholder="</span>type something to block transitions<span class="string">"</span></span><br><span class="line"><span class="string">          onChange=&#123;(event) =&gt; &#123;</span></span><br><span class="line"><span class="string">            setIsBlocking(event.target.value.length &gt; 0);</span></span><br><span class="line"><span class="string">          &#125;&#125;</span></span><br><span class="line"><span class="string">        /&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;p&gt;</span></span><br><span class="line"><span class="string">        &lt;button&gt;Submit to stop blocking&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>404 configuration</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Switch,</span><br><span class="line">  Redirect,</span><br><span class="line">  useLocation,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can use the last &lt;Route&gt; in a &lt;Switch&gt; as a kind of</span></span><br><span class="line"><span class="comment">// "fallback" route, to catch 404 errors.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// There are a few useful things to note about this example:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// - A &lt;Switch&gt; renders the first child &lt;Route&gt; that matches</span></span><br><span class="line"><span class="comment">// - A &lt;Redirect&gt; may be used to redirect old URLs to new ones</span></span><br><span class="line"><span class="comment">// - A &lt;Route path="*&gt; always matches</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">NoMatchExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/old-match"</span>&gt;Old Match, to be redirected&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/will-match"</span>&gt;Will Match&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/will-not-match"</span>&gt;Will Not Match&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/also/will/not/match"</span>&gt;Also Will Not Match&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route exact path="/</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Home /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/old-match<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Redirect to="</span>/will-match<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/will-match<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;WillMatch /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>*<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;NoMatch /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Home() &#123;</span></span><br><span class="line"><span class="string">  return &lt;h3&gt;Home&lt;/h3&gt;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function WillMatch() &#123;</span></span><br><span class="line"><span class="string">  return &lt;h3&gt;Matched!&lt;/h3&gt;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function NoMatch() &#123;</span></span><br><span class="line"><span class="string">  let location = useLocation();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;</span></span><br><span class="line"><span class="string">        No match for &lt;code&gt;&#123;location.pathname&#125;&lt;/code&gt;</span></span><br><span class="line"><span class="string">      &lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>recursive paths</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Redirect,</span><br><span class="line">  useParams,</span><br><span class="line">  useRouteMatch,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sometimes you don't know all the possible routes</span></span><br><span class="line"><span class="comment">// for your application up front; for example, when</span></span><br><span class="line"><span class="comment">// building a file-system browsing UI or determining</span></span><br><span class="line"><span class="comment">// URLs dynamically based on data. In these situations,</span></span><br><span class="line"><span class="comment">// it helps to have a dynamic router that is able</span></span><br><span class="line"><span class="comment">// to generate routes as needed at runtime.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This example lets you drill down into a friends</span></span><br><span class="line"><span class="comment">// list recursively, viewing each user's friend list</span></span><br><span class="line"><span class="comment">// along the way. As you drill down, notice each segment</span></span><br><span class="line"><span class="comment">// being added to the URL. You can copy/paste this link</span></span><br><span class="line"><span class="comment">// to someone else and they will see the same UI.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Then click the back button and watch the last</span></span><br><span class="line"><span class="comment">// segment of the URL disappear along with the last</span></span><br><span class="line"><span class="comment">// friend list.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RecursiveExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/:id"</span>&gt;</span><br><span class="line">          &lt;Person /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;Redirect to="</span>/<span class="number">0</span><span class="string">" /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Person() &#123;</span></span><br><span class="line"><span class="string">  let &#123; url &#125; = useRouteMatch();</span></span><br><span class="line"><span class="string">  let &#123; id &#125; = useParams();</span></span><br><span class="line"><span class="string">  let person = find(parseInt(id));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return (</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;&#123;person.name&#125;’s Friends123&lt;/h3&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &#123;person.friends.map((id) =&gt; (</span></span><br><span class="line"><span class="string">          &lt;li key=&#123;id&#125;&gt;</span></span><br><span class="line"><span class="string">            &lt;Link to=&#123;`$&#123;url&#125;/$&#123;id&#125;`&#125;&gt;&#123;find(id).name&#125;&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;/li&gt;</span></span><br><span class="line"><span class="string">        ))&#125;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;Switch&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path=&#123;`$&#123;url&#125;/:id`&#125;&gt;</span></span><br><span class="line"><span class="string">          &lt;Person /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const PEEPS = [</span></span><br><span class="line"><span class="string">  &#123; id: 0, name: "</span>Michelle<span class="string">", friends: [1, 2, 3] &#125;,</span></span><br><span class="line"><span class="string">  &#123; id: 1, name: "</span>Sean<span class="string">", friends: [0, 3] &#125;,</span></span><br><span class="line"><span class="string">  &#123; id: 2, name: "</span>Kim<span class="string">", friends: [0, 1, 3] &#125;,</span></span><br><span class="line"><span class="string">  &#123; id: 3, name: "</span>David<span class="string">", friends: [1, 2] &#125;,</span></span><br><span class="line"><span class="string">];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function find(id) &#123;</span></span><br><span class="line"><span class="string">  return PEEPS.find((p) =&gt; p.id === id);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>sidebar</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Switch, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Each logical "route" has two components, one for</span></span><br><span class="line"><span class="comment">// the sidebar and one for the main area. We want to</span></span><br><span class="line"><span class="comment">// render both of them in different places when the</span></span><br><span class="line"><span class="comment">// path matches the current URL.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We are going to use this route config in 2</span></span><br><span class="line"><span class="comment">// spots: once for the sidebar and once in the main</span></span><br><span class="line"><span class="comment">// content section. All routes are in the same</span></span><br><span class="line"><span class="comment">// order they would appear in a &lt;Switch&gt;.</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    exact: <span class="literal">true</span>,</span><br><span class="line">    sidebar: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>home!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    main: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/bubblegum"</span>,</span><br><span class="line">    sidebar: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>bubblegum!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    main: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bubblegum<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/shoelaces"</span>,</span><br><span class="line">    sidebar: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>shoelaces!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">    main: <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Shoelaces<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">SidebarExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">display</span>: <span class="string">"flex"</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          style=&#123;&#123;</span><br><span class="line">            padding: <span class="string">"10px"</span>,</span><br><span class="line">            width: <span class="string">"40%"</span>,</span><br><span class="line">            background: <span class="string">"#f0f0f0"</span>,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;ul style=&#123;&#123; <span class="attr">listStyleType</span>: <span class="string">"none"</span>, <span class="attr">padding</span>: <span class="number">0</span> &#125;&#125;&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/bubblegum"</span>&gt;Bubblegum&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/shoelaces"</span>&gt;Shoelaces&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">            &#123;routes.map((route, index) =&gt; (</span></span><br><span class="line"><span class="regexp">              /</span><span class="regexp">/ You can render a &lt;Route&gt; in as many places</span></span><br><span class="line"><span class="regexp">              /</span><span class="regexp">/ as you want in your app. It will render along</span></span><br><span class="line"><span class="regexp">              /</span><span class="regexp">/ with any other &lt;Route&gt;s that also match the URL.</span></span><br><span class="line"><span class="regexp">              /</span><span class="regexp">/ So, a sidebar or breadcrumbs or anything else</span></span><br><span class="line"><span class="regexp">              /</span><span class="regexp">/ that requires you to render multiple things</span></span><br><span class="line"><span class="regexp">              /</span><span class="regexp">/ in multiple places at the same URL is nothing</span></span><br><span class="line"><span class="regexp">              /</span><span class="regexp">/ more than multiple &lt;Route&gt;s.</span></span><br><span class="line"><span class="regexp">              &lt;Route</span></span><br><span class="line"><span class="regexp">                key=&#123;index&#125;</span></span><br><span class="line"><span class="regexp">                path=&#123;route.path&#125;</span></span><br><span class="line"><span class="regexp">                exact=&#123;route.exact&#125;</span></span><br><span class="line"><span class="regexp">                children=&#123;&lt;route.sidebar /</span>&gt;&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">            ))&#125;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">padding</span>: <span class="string">"10px"</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &#123;routes.map(<span class="function">(<span class="params">route, index</span>) =&gt;</span> (</span><br><span class="line">              <span class="comment">// Render more &lt;Route&gt;s with the same paths as</span></span><br><span class="line">              <span class="comment">// above, but different components this time.</span></span><br><span class="line">              &lt;Route</span><br><span class="line">                key=&#123;index&#125;</span><br><span class="line">                path=&#123;route.path&#125;</span><br><span class="line">                exact=&#123;route.exact&#125;</span><br><span class="line">                children=&#123;&lt;route.main /&gt;&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">            ))&#125;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Route Config</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Switch, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some folks find value in a centralized route config.</span></span><br><span class="line"><span class="comment">// A route config is just data. React is great at mapping</span></span><br><span class="line"><span class="comment">// data into components, and &lt;Route&gt; is a component.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Our route config is just an array of logical "routes"</span></span><br><span class="line"><span class="comment">// with `path` and `component` props, ordered the same</span></span><br><span class="line"><span class="comment">// way you'd do inside a `&lt;Switch&gt;`.</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/sandwiches"</span>,</span><br><span class="line">    component: Sandwiches,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/tacos"</span>,</span><br><span class="line">    component: Tacos,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"/tacos/bus"</span>,</span><br><span class="line">        component: Bus,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"/tacos/cart"</span>,</span><br><span class="line">        component: Cart,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RouteConfigExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/tacos"</span>&gt;Tacos&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/sandwiches"</span>&gt;Sandwiches&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">          &#123;routes.map((route, i) =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /</span>&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ A special wrapper for &lt;Route&gt; that knows how to</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ handle "sub"-routes by passing them in a `routes`</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ prop to the component it renders.</span></span><br><span class="line"><span class="regexp">function RouteWithSubRoutes(route) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;Route</span></span><br><span class="line"><span class="regexp">      path=&#123;route.path&#125;</span></span><br><span class="line"><span class="regexp">      render=&#123;(props) =&gt; (</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ pass the sub-routes down to keep nesting</span></span><br><span class="line"><span class="regexp">        &lt;route.component &#123;...props&#125; routes=&#123;route.routes&#125; /</span>&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sandwiches</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sandwiches<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tacos</span>(<span class="params">&#123; routes &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Tacos&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Link to="/</span>tacos/bus<span class="string">"&gt;Bus&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/tacos/cart<span class="string">"&gt;Cart&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;Switch&gt;</span></span><br><span class="line"><span class="string">        &#123;routes.map((route, i) =&gt; (</span></span><br><span class="line"><span class="string">          &lt;RouteWithSubRoutes key=&#123;i&#125; &#123;...route&#125; /&gt;</span></span><br><span class="line"><span class="string">        ))&#125;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Bus() &#123;</span></span><br><span class="line"><span class="string">  return &lt;h3&gt;Bus&lt;/h3&gt;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function Cart() &#123;</span></span><br><span class="line"><span class="string">  return &lt;h3&gt;Cart&lt;/h3&gt;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>QueryParamsExample</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Link, useLocation &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React Router does not have any opinions about</span></span><br><span class="line"><span class="comment">// how you should parse URL query strings.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If you use simple key=value query strings and</span></span><br><span class="line"><span class="comment">// you do not need to support IE 11, you can use</span></span><br><span class="line"><span class="comment">// the browser's built-in URLSearchParams API.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If your query strings contain array or object</span></span><br><span class="line"><span class="comment">// syntax, you'll probably need to bring your own</span></span><br><span class="line"><span class="comment">// query parsing function.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">QueryParamsExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;QueryParamsDemo /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ A custom hook that builds on useLocation to parse</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ the query string for you.</span></span><br><span class="line"><span class="regexp">function useQuery() &#123;</span></span><br><span class="line"><span class="regexp">  return new URLSearchParams(useLocation().search);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function QueryParamsDemo() &#123;</span></span><br><span class="line"><span class="regexp">  let query = useQuery();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;Accounts&lt;/</span>h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/account?name=netflix"</span>&gt;Netflix&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/account?name=zillow-group"</span>&gt;Zillow Group&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/account?name=yahoo"</span>&gt;Yahoo&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/account?name=modus-create"</span>&gt;Modus Create&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Child name=&#123;query.get("name")&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;name ? (</span><br><span class="line">        &lt;h3&gt;</span><br><span class="line">          The &lt;code&gt;name&lt;<span class="regexp">/code&gt; in the query string is &amp;quot;&#123;name&#125;</span></span><br><span class="line"><span class="regexp">          &amp;quot;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>h3&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;h3&gt;There is no name <span class="keyword">in</span> the query string&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react学习之旅3 Hook</title>
      <link href="/2020/07/29/react3/"/>
      <url>/2020/07/29/react3/</url>
      
        <content type="html"><![CDATA[<h3 id="Hook-简介"><a href="#Hook-简介" class="headerlink" title="Hook 简介"></a>Hook 简介</h3><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p><img src="/2020/07/29/react3/1.png" class><p>为什么要加入 hook</p><ul><li><p>在组件之间复用状态逻辑很难</p></li><li><p>复杂组件变得难以理解</p><p>vue3.0 也是开发 Hook 也是说了这个问题</p></li></ul><h4 id="userState"><a href="#userState" class="headerlink" title="userState"></a>userState</h4><p>上面截图的例子中，useState 就是一个 Hook ，通过在函数组件里调用它来给组件添加一些内部 state，React 会在重复渲染时保留这个 state，<br>useState 会返回一对值：当前状态和一个让你更新它的函数。<br>useState 唯一的参数就是初始 state。在上面的例子中，我们的计数器是从零开始的，所以初始 state 就是 0。值得注意的是，不同于 this.state，这里的 state 不一定要是一个对象 —— 如果你有需要，它也可以是。这个初始 state 参数只有在第一次渲染时会被用到。</p><p>如果要声明多个 state 变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明多个 state 变量！</span></span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">"banana"</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">"Learn Hooks"</span> &#125;]);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>hook 的解释<br>Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。Hook 不能在 class 组件中使用 —— 这使得你不使用 class 也能使用 React。（我们不推荐把你已有的组件全部重写，但是你可以在新组件里开始使用 Hook。）</p></blockquote><h4 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h4><p>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。（我们会在使用 Effect Hook 里展示对比 useEffect 和这些方法的例子。）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params">props, state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于 componentDidMount 和 componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用浏览器的 API 更新页面标题</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Hook-使用规则"><a href="#Hook-使用规则" class="headerlink" title="Hook 使用规则"></a>Hook 使用规则</h3><p>Hook 就是 JavaScript 函数，但是使用它们会有两个额外的规则：</p><ul><li>只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。</li><li>只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以调用 Hook —— 就是自定义的 Hook 中，我们稍后会学习到。）</li></ul><p>npm install eslint-plugin-react-hooks –save-dev // 检查 Hook 的规则,// 检查 effect 的依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"react-hooks/rules-of-hooks"</span>: <span class="string">"error"</span>, <span class="comment">// 检查 Hook 的规则</span></span><br><span class="line"><span class="string">"react-hooks/exhaustive-deps"</span>: <span class="string">"warn"</span> <span class="comment">// 检查 effect 的依赖</span></span><br></pre></td></tr></table></figure><h3 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFriendStatus</span>(<span class="params">friendID</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//Specify how to clean up after this effect:</span></span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例子将 friendID 作为参数，并返回该好友是否在线：<br>现在我们可以在两个组件中使用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Loading..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">"Online"</span> : <span class="string">"Offline"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li style=&#123;&#123; <span class="attr">color</span>: isOnline ? <span class="string">"green"</span> : <span class="string">"black"</span> &#125;&#125;&gt;&#123;props.friend.name&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>每个组件间的 state 是完全独立的。Hook 是一种复用状态逻辑的方式，它不复用 state 本身。事实上 Hook 的每次调用都有一个完全独立的 state —— 因此你可以在单个组件中多次调用同一个自定义 Hook。</p><h3 id="其他-Hook"><a href="#其他-Hook" class="headerlink" title="其他 Hook"></a>其他 Hook</h3><p>useContext 让你不使用组件嵌套就可以订阅 React 的 Context。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> locale = useContext(LocaleContext);</span><br><span class="line">  <span class="keyword">const</span> theme = useContext(ThemeContext);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外 useReducer 可以让你通过 reducer 来管理组件本地的复杂 state。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"increment"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"decrement"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">"decrement"</span> &#125;)&#125;&gt;-&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: "increment" &#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react学习之旅2</title>
      <link href="/2020/07/29/react2/"/>
      <url>/2020/07/29/react2/</url>
      
        <content type="html"><![CDATA[<p>React 中的一些高级用法：</p><h3 id="语义化的-HTML"><a href="#语义化的-HTML" class="headerlink" title="语义化的 HTML"></a>语义化的 HTML</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element" target="_blank" rel="noopener">参考</a></p><p>有时，语义化的 HTML 会被破坏。比如当在 JSX 中使用 <code>&lt;div&gt;</code> 元素来实现 React 代码功能的时候，又或是在使用列表（<code>&lt;ol&gt;</code>， <code>&lt;ul&gt;</code> 和 <code>&lt;dl&gt;</code>）和 HTML <code>&lt;table&gt;</code> 时。 在这种情况下，我们应该使用 React Fragments 来组合各个组件。</p><img src="/2020/07/29/react2/1.png" class><img src="/2020/07/29/react2/2.png" class><p>短语法：</p><img src="/2020/07/29/react2/3.png" class><h3 id="无障碍表单"><a href="#无障碍表单" class="headerlink" title="无障碍表单"></a>无障碍表单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label htmlFor=<span class="string">"namedInput"</span>&gt;Name:&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input id="namedInput" type="text" name="name"/</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>React 16.3 版本引入的 React.createRef() API, const node = this.myRef.current;<br>使用一个较早版本的 React，我们推荐你使用回调形式的 refs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 创造一个 textInput DOM 元素的 ref</span></span><br><span class="line">    <span class="keyword">this</span>.textInput = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="comment">// 使用 `ref` 回调函数以在实例的一个变量中存储文本输入 DOM 元素</span></span><br><span class="line">  <span class="comment">//（比如，this.textInput）。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        ref=&#123;<span class="keyword">this</span>.textInput&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">focus() &#123;</span><br><span class="line">  <span class="comment">// 使用原始的 DOM API 显式地聚焦在 text input 上</span></span><br><span class="line">  <span class="comment">// 注意：我们通过访问 “current” 来获得 DOM 节点</span></span><br><span class="line">  <span class="keyword">this</span>.textInput.current.focus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父组件需要获取其子组件的一个元素的 ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;props.inputRef&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props);</span></span><br><span class="line"><span class="regexp">    this.inputElement = React.createRef();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;CustomTextInput inputRef=&#123;this.inputElement&#125; /</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在你就可以在需要时设置焦点了</span></span><br><span class="line"><span class="keyword">this</span>.inputElement.current.focus();</span><br></pre></td></tr></table></figure><h3 id="OuterClick"><a href="#OuterClick" class="headerlink" title="OuterClick"></a>OuterClick</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClickExample</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">isOpen</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.toggleContainer = React.createRef();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.onClickHandler = <span class="keyword">this</span>.onClickHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.onClickOutsideHandler = <span class="keyword">this</span>.onClickOutsideHandler.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.onClickOutsideHandler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.onClickOutsideHandler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onClickHandler() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">currentState</span>) =&gt;</span> (&#123;</span><br><span class="line">      isOpen: !currentState.isOpen,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onClickOutsideHandler(event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">this</span>.state.isOpen &amp;&amp;</span><br><span class="line">      !<span class="keyword">this</span>.toggleContainer.current.contains(event.target)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">isOpen</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.toggleContainer&#125;&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onClickHandler&#125;&gt;Select an option&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.state.isOpen &amp;&amp; (</span></span><br><span class="line"><span class="regexp">          &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;Option 1&lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;Option <span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;Option 3&lt;/</span>li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import"></a>动态 import</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">"./math"</span>).then(<span class="function">(<span class="params">math</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(math.add(<span class="number">16</span>, <span class="number">26</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你自己配置 Webpack，你可能要阅读下 Webpack 关于代码分割的指南。你的 Webpack 配置应该类似于此。<br>当使用 Babel 时，你要确保 Babel 能够解析动态 import 语法而不是将其进行转换。对于这一要求你需要 babel-plugin-syntax-dynamic-import 插件。</p><p>或者使用 React.lazy 加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HelloComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./components/Hello"</span>));</span><br><span class="line">&lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">  &lt;section&gt;</span></span><br><span class="line"><span class="regexp">    &lt;HelloComponent /</span>&gt;</span><br><span class="line">    &lt;HelloComponent /&gt;</span><br><span class="line">  &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Suspense&gt;;</span><br></pre></td></tr></table></figure><p>React.lazy 目前只支持默认导出（default exports）。如果你想被引入的模块使用命名导出（named exports），你可以创建一个中间模块，来重新导出为默认模块。这能保证 tree shaking 不会出错，并且不必引入不需要的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ManyComponents.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyUnusedComponent = <span class="comment">/* ... */</span>;</span><br><span class="line"><span class="comment">// MyComponent.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; MyComponent <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">"./ManyComponents.js"</span>;</span><br><span class="line"><span class="comment">// MyApp.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">const</span> MyComponent = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./MyComponent.js"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>异常捕获边界（Error boundaries）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> MyErrorBoundary <span class="keyword">from</span> <span class="string">"./MyErrorBoundary"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OtherComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./OtherComponent"</span>));</span><br><span class="line"><span class="keyword">const</span> AnotherComponent = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./AnotherComponent"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyErrorBoundary&gt;</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;section&gt;</span></span><br><span class="line"><span class="regexp">          &lt;OtherComponent /</span>&gt;</span><br><span class="line">          &lt;AnotherComponent /&gt;</span><br><span class="line">        &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Suspense&gt;</span><br><span class="line">    &lt;<span class="regexp">/MyErrorBoundary&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrorBoundary</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromError(error) &#123;</span><br><span class="line">    <span class="comment">// 更新 state 使下一次渲染能够显示降级后的 UI</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidCatch(error, errorInfo) &#123;</span><br><span class="line">    <span class="comment">// 你同样可以将错误日志上报给服务器</span></span><br><span class="line">    logErrorToMyService(error, errorInfo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// 你可以自定义降级后的 UI 并渲染</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每层需要手动传递theme</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Toolbar</span> <span class="attr">theme</span>=<span class="string">"dark"</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Toolbar</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Toolbar 组件接受一个额外的“theme”属性，然后传递给 ThemedButton 组件。</span></span><br><span class="line">  <span class="comment">// 如果应用中每一个单独的按钮都需要知道 theme 的值，这会是件很麻烦的事，</span></span><br><span class="line">  <span class="comment">// 因为必须将这个值层层传递所有组件。</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ThemedButton theme=&#123;props.theme&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class ThemedButton extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;Button theme=&#123;this.props.theme&#125; /</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。</span></span><br><span class="line"><span class="comment">// 为当前的 theme 创建一个 context（“light”为默认值）。</span></span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(<span class="string">"light"</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 使用一个 Provider 来将当前的 theme 传递给以下的组件树。</span></span><br><span class="line">    <span class="comment">// 无论多深，任何组件都能读取这个值。</span></span><br><span class="line">    <span class="comment">// 在这个例子中，我们将 “dark” 作为当前的值传递下去。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Provider value=<span class="string">"dark"</span>&gt;</span><br><span class="line">        &lt;Toolbar /&gt;</span><br><span class="line">      &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 中间的组件再也不必指明往下传递 theme 了。</span></span><br><span class="line"><span class="regexp">function Toolbar() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ThemedButton /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class ThemedButton extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 指定 contextType 读取当前的 theme context。</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ React 会往上找到最近的 theme Provider，然后使用它的值。</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 在这个例子中，当前的 theme 值为 “dark”。</span></span><br><span class="line"><span class="regexp">  static contextType = ThemeContext;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;Button theme=&#123;this.context&#125; /</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。<br>当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。</p><h3 id="Context-Consumer"><a href="#Context-Consumer" class="headerlink" title="Context.Consumer"></a>Context.Consumer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyContext.Consumer&gt;</span><br><span class="line">  &#123;value =&gt; <span class="comment">/* 基于 context 值进行渲染*/</span>&#125;</span><br><span class="line">&lt;<span class="regexp">/MyContext.Consumer&gt;</span></span><br></pre></td></tr></table></figure><h3 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h3><p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。<br>具体而言，高阶组件是参数为组件，返回值为新组件的函数。<br>HOC 不会修改传入的组件，也不会使用继承来复制其行为。相反，HOC 通过将组件包装在容器组件中来组成新组件。HOC 是纯函数，没有副作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此函数接收一个组件...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withSubscription</span>(<span class="params">WrappedComponent, selectData</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...并返回另一个组件...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        data: selectData(DataSource, props),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="comment">// ...负责订阅相关的操作...</span></span><br><span class="line">      DataSource.addChangeListener(<span class="keyword">this</span>.handleChange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">      DataSource.removeChangeListener(<span class="keyword">this</span>.handleChange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange() &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        data: selectData(DataSource, <span class="keyword">this</span>.props),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="comment">// ... 并使用新数据渲染被包装的组件!</span></span><br><span class="line">      <span class="comment">// 请注意，我们可能还会传递其他属性</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> CommentListWithSubscription = withSubscription(</span><br><span class="line">  CommentList,</span><br><span class="line">  (DataSource) =&gt; DataSource.getComments()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BlogPostWithSubscription = withSubscription(</span><br><span class="line">  BlogPost,</span><br><span class="line">  (DataSource, props) =&gt; DataSource.getBlogPost(props.id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h3><p>Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.createPortal(child, container);</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// React 挂载了一个新的 div，并且把子元素渲染其中</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 然而，有时候将子元素插入到 DOM 节点中的不同位置也是有好处的：</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render() &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ React 并*没有*创建一个新的 div。它只是把子元素渲染到 `domNode` 中。</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ `domNode` 是一个可以在任何位置的有效 DOM 节点。</span></span><br><span class="line"><span class="regexp">  return ReactDOM.createPortal(</span></span><br><span class="line"><span class="regexp">    this.props.children,</span></span><br><span class="line"><span class="regexp">    domNode</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Profiler-API"><a href="#Profiler-API" class="headerlink" title="Profiler API"></a>Profiler API</h3><p>Profiler 测量渲染一个 React 应用多久渲染一次以及渲染一次的“代价”。 它的目的是识别出应用中渲染较慢的部分，或是可以使用类似 memoization 优化的部分，并从相关优化中获益。</p><h3 id="Diffing-算法"><a href="#Diffing-算法" class="headerlink" title="Diffing 算法"></a>Diffing 算法</h3><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> mouse = <span class="keyword">this</span>.props.mouse;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;img</span><br><span class="line">        src=<span class="string">"/cat.jpg"</span></span><br><span class="line">        style=&#123;&#123; <span class="attr">position</span>: <span class="string">"absolute"</span>, <span class="attr">left</span>: mouse.x, <span class="attr">top</span>: mouse.y &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleMouseMove = <span class="keyword">this</span>.handleMouseMove.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseMove(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">height</span>: <span class="string">"100vh"</span> &#125;&#125; onMouseMove=&#123;<span class="keyword">this</span>.handleMouseMove&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment">          使用 `render`prop 动态决定要渲染的内容，</span></span><br><span class="line"><span class="comment">          而不是给出一个 &lt;Mouse&gt; 渲染结果的静态表示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          &lt;Cat mouse=&#123;this.state&#125; /&gt;</span></span><br><span class="line"><span class="comment">        */</span>&#125;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.render(<span class="keyword">this</span>.state)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class MouseTracker extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;移动鼠标!&lt;/</span>h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;(mouse) =&gt; <span class="xml"><span class="tag">&lt;<span class="name">Cat</span> <span class="attr">mouse</span>=<span class="string">&#123;mouse&#125;</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>将 Render Props 与 React.PureComponent 一起使用时要小心</p><h3 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h3><p>StrictMode 目前有助于：</p><ul><li>识别不安全的生命周期</li><li>关于使用过时字符串 ref API 的警告</li><li>关于使用废弃的 findDOMNode 方法的警告</li><li>检测意外的副作用</li><li>检测过时的 context API</li></ul><h3 id="使用-PropTypes-进行类型检查"><a href="#使用-PropTypes-进行类型检查" class="headerlink" title="使用 PropTypes 进行类型检查"></a>使用 PropTypes 进行类型检查</h3><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><blockquote><p>默认值</p></blockquote><p> React 渲染生命周期时，表单元素上的 value 将会覆盖 DOM 节点中的值，在非受控组件中，你经常希望 React 能赋予组件一个初始值，但是不去控制后续的更新。 在这种情况下, 你可以指定一个 defaultValue 属性，而不是 value。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0 组合式API 初探</title>
      <link href="/2020/07/27/vue3/"/>
      <url>/2020/07/27/vue3/</url>
      
        <content type="html"><![CDATA[<p>Vue3.0 已经出来一段时间了，在 3.0 中提出了一个新的设计，叫组合式 API：<br>一组低侵入式的、函数式的 API，使得我们能够更灵活地「组合」组件的逻辑。<br>我个人理解就是，在页面渲染之前，在一个地方进行数据或函数的组合，并输出到模板。比起 vue2.0 可能更加直观，页面上用了哪些 state 和函数。</p><p>我们一起来看看有哪些变化吧。</p><h3 id="基本范例"><a href="#基本范例" class="headerlink" title="基本范例"></a>基本范例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=<span class="string">"increment"</span>&gt;</span><br><span class="line">    Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">      count: <span class="number">0</span>,</span><br><span class="line">      double: computed(<span class="function"><span class="params">()</span> =&gt;</span> state.count \* <span class="number">2</span>),</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>Vue3.0 里面已经没有了 data, methods 等。取而代之的是使用一个 setup 函数封装了包括，data, methods 等。官方解释，是为了更好的逻辑复用与代码组织。<br>用 vue 开发过复杂系统的都知道，随着项目的复杂性增加，内部的 data 定义，methods 定义也变得越来越复杂，如果是从别人那里接手过来的，如果看到一大片 data,methods，估计心里也会有点瑟瑟发抖。</p><h3 id="动机与目的"><a href="#动机与目的" class="headerlink" title="动机与目的"></a>动机与目的</h3><h4 id="更好的逻辑复用与代码组织"><a href="#更好的逻辑复用与代码组织" class="headerlink" title="更好的逻辑复用与代码组织"></a>更好的逻辑复用与代码组织</h4><p>官网总结两点：</p><ol><li>随着功能的增长，复杂组件的代码变得越来越难以阅读和理解。这种情况在开发人员阅读他人编写的代码时尤为常见。根本原因是 Vue 现有的 API 迫使我们通过选项组织代码，但是有的时候通过逻辑关系组织代码更有意义。</li><li>目前缺少一种简洁且低成本的机制来提取和重用多个组件之间的逻辑。</li></ol><h4 id="更好的类型推导"><a href="#更好的类型推导" class="headerlink" title="更好的类型推导"></a>更好的类型推导</h4><p>Vue2.0 在集成 typescript 的时候，主要依靠一个简单的 this 上下文来暴露 property，在使用时有时候会有点棘手。比如 methods 选项下的函数的 this 是指向组件实例的，而不是这个 methods 对象，比如集成过 echarts 的都知道，在事件函数处理中有时候需要通过 this 去获取当前事件的对象，而不是指向组件的 this.</p><h4 id="响应式状态"><a href="#响应式状态" class="headerlink" title="响应式状态"></a>响应式状态</h4><p>vue3.0 里面定义一个响应式状态有两种办法，reactive 和 ref</p><h5 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, watchEffect &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  state.count++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> renderContext = &#123;</span><br><span class="line">  state,</span><br><span class="line">  increment,</span><br><span class="line">&#125;</span><br><span class="line">watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  # 假设的方法，并不是真实的 API</span><br><span class="line">  renderTemplate(</span><br><span class="line">    <span class="string">`&lt;button @click="increment"&gt;&#123;&#123; state.count &#125;&#125;&lt;/button&gt;`</span>,</span><br><span class="line">    renderContext</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h5><p>使用的是 ref 的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count.value++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderContext = &#123;</span><br><span class="line">  count,</span><br><span class="line">  increment,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  renderTemplate(</span><br><span class="line">    <span class="string">`&lt;button @click="increment"&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;`</span>,</span><br><span class="line">    renderContext</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Ref-vs-Reactive"><a href="#Ref-vs-Reactive" class="headerlink" title="Ref vs. Reactive"></a>Ref vs. Reactive</h5><p>1.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 风格 1: 将变量分离</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updatePosition</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  x = e.pageX;</span><br><span class="line">  y = e.pageY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 与下面的相比较 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 风格 2: 单个对象</span></span><br><span class="line"><span class="keyword">const</span> pos = &#123;</span><br><span class="line">  x: <span class="number">0</span>,</span><br><span class="line">  y: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updatePosition</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  pos.x = e.pageX;</span><br><span class="line">  pos.y = e.pageY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果使用 ref，我们实际上就是将风格 (1) 转换为使用 ref (为了让基础类型值具有响应性) 的更细致的写法。</p></li><li><p>使用 reactive 和风格 (2) 一致。我们只需要通过 reactive 创建这个对象。</p></li></ul><ol start="2"><li>而只使用 reactive 的问题是，使用组合函数时必须始终保持对这个所返回对象的引用以保持响应性。这个对象不能被解构或展开：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合函数：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useMousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pos = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 这里会丢失响应性!</span></span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里会丢失响应性!</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...useMousePosition(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是保持响应性的唯一办法！</span></span><br><span class="line">    <span class="comment">// 你必须返回 `pos` 本身，并按 `pos.x` 和 `pos.y` 的方式在模板中引用 x 和 y。</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      pos: useMousePosition(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>vue3.0 还提供了一个 api toRefs，可以将 reactive 转换成 ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useMousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pos = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> toRefs(pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x &amp; y 现在是 ref 形式了!</span></span><br><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br></pre></td></tr></table></figure><p>接下来一起看下，在 3.0 中怎么去组织代码。</p><h3 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h3><p>我们在阅读一些逻辑比较复杂的代码时，很难直接梳理出各个逻辑关注点。你会发现到与各个逻辑关注点相关的代码是分散在各处的。比如：有的方法的定义与所需数据的距离特别远，需要不停来回跳转查看，用官网的图片例子可以说明：</p><img src="/2020/07/27/vue3/2.png" class><p>该图片是真实的 Vue CLI UI 文件浏览器的一段代码，该例子包含了，创建文件夹，文件夹导航，搜藏文件夹，隐藏文件夹等，相信阅读和修改这些代码还是比较费时的。</p><p>如果使用 vue3.0 里面的组合式 api，可以抽象出来的逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCreateFolder</span>(<span class="params">openFolder</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 响应式数据</span></span><br><span class="line">  <span class="keyword">const</span> showNewFolder = ref(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> newFolderName = ref(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原来的计算属性</span></span><br><span class="line">  <span class="keyword">const</span> newFolderValid = computed(<span class="function"><span class="params">()</span> =&gt;</span> isValidMultiName(newFolderName.value))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原来的一个方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">createFolder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!newFolderValid.value) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> mutate(&#123;</span><br><span class="line">      mutation: FOLDER_CREATE,</span><br><span class="line">      variables: &#123;</span><br><span class="line">        name: newFolderName.value,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    openFolder(result.data.folderCreate.path)</span><br><span class="line">    newFolderName.value = <span class="string">''</span></span><br><span class="line">    showNewFolder.value = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    showNewFolder,</span><br><span class="line">    newFolderName,</span><br><span class="line">    newFolderValid,</span><br><span class="line">    createFolder,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 最后变成这样</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCurrentFolderData</span>(<span class="params">networkState</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFolderNavigation</span>(<span class="params">&#123; networkState, currentFolderData &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFavoriteFolder</span>(<span class="params">currentFolderData</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useHiddenFolders</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCreateFolder</span>(<span class="params">openFolder</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 组合后变成这样</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 网络状态</span></span><br><span class="line">    <span class="keyword">const</span> &#123; networkState &#125; = useNetworkState()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件夹状态</span></span><br><span class="line">    <span class="keyword">const</span> &#123; folders, currentFolderData &#125; = useCurrentFolderData(networkState)</span><br><span class="line">    <span class="keyword">const</span> folderNavigation = useFolderNavigation(&#123;</span><br><span class="line">      networkState,</span><br><span class="line">      currentFolderData,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> &#123; favoriteFolders, toggleFavorite &#125; = useFavoriteFolders(</span><br><span class="line">      currentFolderData</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">const</span> &#123; showHiddenFolders &#125; = useHiddenFolders()</span><br><span class="line">    <span class="keyword">const</span> createFolder = useCreateFolder(folderNavigation.openFolder)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前工作目录</span></span><br><span class="line">    resetCwdOnLeave()</span><br><span class="line">    <span class="keyword">const</span> &#123; updateOnCwdChanged &#125; = useCwdUtils()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实用工具</span></span><br><span class="line">    <span class="keyword">const</span> &#123; slicePath &#125; = usePathUtils()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      networkState,</span><br><span class="line">      folders,</span><br><span class="line">      currentFolderData,</span><br><span class="line">      folderNavigation,</span><br><span class="line">      favoriteFolders,</span><br><span class="line">      toggleFavorite,</span><br><span class="line">      showHiddenFolders,</span><br><span class="line">      createFolder,</span><br><span class="line">      updateOnCwdChanged,</span><br><span class="line">      slicePath,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的组织就会修改成如下：</p><img src="/2020/07/27/vue3/3.png" class><p>再来看一个例子，实时获取鼠标的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useMousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> y = ref(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    x.value = e.pageX;</span><br><span class="line">    y.value = e.pageY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"mousemove"</span>, update);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">"mousemove"</span>, update);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在组件中使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">"./mouse"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br><span class="line">    <span class="comment">// 其他逻辑...</span></span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大家也可以想象如果使用 vue2.0 去实现这个功能，可能需要定义一个 mixin，但是使用起来肯定没有这样清晰和方便。</p><p>好了 vue3.0 就先学到这里。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> vue3.0组合式API </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Koa2从入门到精通4</title>
      <link href="/2020/07/25/koa4/"/>
      <url>/2020/07/25/koa4/</url>
      
        <content type="html"><![CDATA[<h3 id="Koa2-简单接口开发"><a href="#Koa2-简单接口开发" class="headerlink" title="Koa2 简单接口开发"></a>Koa2 简单接口开发</h3><p>依赖 koa2, koa-body, @koa/router：</p><ul><li><a href="https://sequelize.org/" target="_blank" rel="noopener">sequelize</a>，ORM 框架，支持 Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server.</li><li>mysql2，mysql 驱动</li></ul><p>数据库的配置和路由配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(<span class="string">"koa"</span>);</span><br><span class="line">const Router = require(<span class="string">"@koa/router"</span>);</span><br><span class="line">const koaBody = require(<span class="string">"koa-body"</span>);</span><br><span class="line"></span><br><span class="line">const Sequelize = require(<span class="string">"sequelize"</span>);</span><br><span class="line">const Model = Sequelize.Model;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库地址的配置</span></span><br><span class="line">const sequelize = new Sequelize(<span class="string">"demo"</span>, <span class="string">"root"</span>, <span class="string">"11111111"</span>, &#123;</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  port: 3306,</span><br><span class="line">  logging: <span class="literal">true</span>,</span><br><span class="line">  dialect: <span class="string">"mysql"</span>,</span><br><span class="line">  pool: &#123;</span><br><span class="line">    max: 20,</span><br><span class="line">    min: 0,</span><br><span class="line">    idle: 10000,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据库表</span></span><br><span class="line">class User extends Model &#123;&#125;</span><br><span class="line">User.init(</span><br><span class="line">  &#123;</span><br><span class="line">    firstName: Sequelize.STRING,</span><br><span class="line">    lastName: Sequelize.STRING,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; sequelize, modelName: <span class="string">"user"</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sync 同步用户表, 生成环境禁止使用</span></span><br><span class="line">async <span class="keyword">function</span> <span class="function"><span class="title">syncUserTable</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> User.sync(&#123; force: <span class="literal">true</span> &#125;).<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> User.create(&#123;</span><br><span class="line">      firstName: <span class="string">"John"</span>,</span><br><span class="line">      lastName: <span class="string">"Hancock"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置路由</span></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">"/users"</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = await User.findAll();</span><br><span class="line">  &#125;)</span><br><span class="line">  .post(<span class="string">"/user"</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> &#123; firstName, lastName &#125; = ctx.request.body;</span><br><span class="line">    <span class="built_in">let</span> user = await User.create(&#123;</span><br><span class="line">      firstName,</span><br><span class="line">      lastName,</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.body = user;</span><br><span class="line">  &#125;)</span><br><span class="line">  .put(<span class="string">"/user"</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> &#123; firstName, lastName, id &#125; = ctx.request.body;</span><br><span class="line">    <span class="built_in">let</span> result = await User.update(</span><br><span class="line">      &#123; firstName, lastName &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">where</span>: &#123;</span><br><span class="line">          id: &#123;</span><br><span class="line">            [Op.eq]: id,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    ctx.body = result;</span><br><span class="line">  &#125;)</span><br><span class="line">  .del(<span class="string">"/users/:id"</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> id = ctx.params.id;</span><br><span class="line">    <span class="built_in">let</span> result = await User.destroy(&#123;</span><br><span class="line">      <span class="built_in">where</span>: &#123;</span><br><span class="line">        id: &#123;</span><br><span class="line">          [Op.eq]: id,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.body = result;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证数据库连接并启动服务</span></span><br><span class="line">try &#123;</span><br><span class="line">  (async()=&gt;&#123;</span><br><span class="line">    await sequelize.authenticate();</span><br><span class="line">    await syncUserTable();</span><br><span class="line">    console.log(<span class="string">'Connection has been established successfully.'</span>);</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">  console.error(<span class="string">'Unable to connect to the database:'</span>, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单增删改查接口就实现了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Koa2从入门到精通3</title>
      <link href="/2020/07/25/koa3/"/>
      <url>/2020/07/25/koa3/</url>
      
        <content type="html"><![CDATA[<h3 id="常用中间件介绍"><a href="#常用中间件介绍" class="headerlink" title="常用中间件介绍"></a>常用中间件介绍</h3><h3 id="koa-router"><a href="#koa-router" class="headerlink" title="@koa/router"></a>@koa/router</h3><p><a href="https://github.com/koajs/router/blob/master/API.md" target="_blank" rel="noopener">参考</a></p><blockquote><p>demo</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const Router = require(<span class="string">'@koa/router'</span>);</span><br><span class="line"></span><br><span class="line">const app = new Koa();</span><br><span class="line">const router = new Router();</span><br><span class="line"></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="string">'Hello World!'</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .post(<span class="string">'/users'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;)</span><br><span class="line">  .put(<span class="string">'/users/:id'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;)</span><br><span class="line">  .del(<span class="string">'/users/:id'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;)</span><br><span class="line">  .all(<span class="string">'/users/:id'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br></pre></td></tr></table></figure><h4 id="route-的定义方式主要有以下几种"><a href="#route-的定义方式主要有以下几种" class="headerlink" title="route 的定义方式主要有以下几种"></a>route 的定义方式主要有以下几种</h4><blockquote><p>Named routes</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'user'</span>, <span class="string">'/users/:id'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line"> // ...</span><br><span class="line">&#125;);</span><br><span class="line">router.url(<span class="string">'user'</span>, 3);</span><br></pre></td></tr></table></figure><blockquote><p>Mutiple middleware</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.get(</span><br><span class="line">  <span class="string">'/users/:id'</span>,</span><br><span class="line">  (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> User.findOne(ctx.params.id).<span class="keyword">then</span>(<span class="keyword">function</span>(user) &#123;</span><br><span class="line">      ctx.user = user;</span><br><span class="line">      next();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  ctx =&gt; &#123;</span><br><span class="line">    console.log(ctx.user);</span><br><span class="line">    // =&gt; &#123; id: 17, name: <span class="string">"Alex"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>Nested routers</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const forums = new Router();</span><br><span class="line">const posts = new Router();</span><br><span class="line"></span><br><span class="line">posts.get(<span class="string">'/'</span>, (ctx, next) =&gt; &#123;...&#125;);</span><br><span class="line">posts.get(<span class="string">'/:pid'</span>, (ctx, next) =&gt; &#123;...&#125;);</span><br><span class="line">forums.use(<span class="string">'/forums/:fid/posts'</span>, posts.routes(), posts.allowedMethods());</span><br><span class="line"></span><br><span class="line">// responds to <span class="string">"/forums/123/posts"</span> and <span class="string">"/forums/123/posts/123"</span></span><br><span class="line">app.use(forums.routes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Router prefixes</span></span><br><span class="line">const router = new Router(&#123;</span><br><span class="line">  prefix: <span class="string">'/users'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, ...); // responds to <span class="string">"/users"</span></span><br><span class="line">router.get(<span class="string">'/:id'</span>, ...); // responds to <span class="string">"/users/:id"</span></span><br></pre></td></tr></table></figure><h4 id="route-的一些方法"><a href="#route-的一些方法" class="headerlink" title="route 的一些方法"></a>route 的一些方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.redirect(<span class="string">'/login'</span>, <span class="string">'sign-in'</span>);</span><br><span class="line"></span><br><span class="line">router.route(name) ⇒ Layer | <span class="literal">false</span> <span class="comment">#路由查找</span></span><br><span class="line"></span><br><span class="line">router.url(name, params, [options]) ⇒ String | Error  <span class="comment">#生成url</span></span><br><span class="line">Router.url(path, params) ⇒ String   <span class="comment">#生成url</span></span><br><span class="line"></span><br><span class="line">router.param(param, middleware) ⇒ Router  <span class="comment">#用于带参数别名路由，可以用来提前做一些验证</span></span><br></pre></td></tr></table></figure><h3 id="koa-body"><a href="#koa-body" class="headerlink" title="koa-body"></a>koa-body</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const koaBody = require(<span class="string">'koa-body'</span>);</span><br><span class="line"></span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(koaBody());</span><br><span class="line">app.use(ctx =&gt; &#123;</span><br><span class="line">  ctx.body = `Request Body: <span class="variable">$&#123;JSON.stringify(ctx.request.body)&#125;</span>`;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和koa-router一起可以</span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/users'</span>, koaBody(),</span><br><span class="line">  (ctx) =&gt; &#123;</span><br><span class="line">    console.log(ctx.request.body);</span><br><span class="line">    // =&gt; POST body</span><br><span class="line">    ctx.body = JSON.stringify(ctx.request.body);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>koaBody 的可以传入一些参数 Options：<br>常用的如下</p><ul><li>jsonLimit {String|Integer} The byte (if integer) limit of the JSON body, default 1mb</li><li>formLimit {String|Integer} The byte (if integer) limit of the form body, default 56kb</li><li>textLimit {String|Integer} The byte (if integer) limit of the text body, default 56kb</li><li>encoding {String} Sets encoding for incoming form fields, default utf-8</li><li>multipart {Boolean} Parse multipart bodies, default false</li><li>urlencoded {Boolean} Parse urlencoded bodies, default true</li><li>text {Boolean} Parse text bodies, such as XML, default true</li><li>json {Boolean} Parse JSON bodies, default true</li><li>formidable {Object} Options to pass to the formidable multipart parser</li><li>onError {Function} Custom error handle, if throw an error, you can customize the response - onError(error, context), default will throw</li><li>parsedMethods {String[]} Declares the HTTP methods where bodies will be parsed, default [‘POST’, ‘PUT’, ‘PATCH’]. Replaces strict option.</li></ul><p>formidable 可以对文件上传做一些配置，比如大小限制等，具体参考 <a href="https://github.com/node-formidable/formidable" target="_blank" rel="noopener">node-formidable</a></p><ul><li>maxFields {Integer} Limits the number of fields that the querystring parser will decode, default 1000</li><li>maxFieldsSize {Integer} Limits the amount of memory all fields together (except files) can allocate in</li><li>uploadDir {String} Sets the directory for placing file uploads in, default os.tmpDir()</li><li>keepExtensions {Boolean} Files written to uploadDir will include the extensions of the original files, default false</li><li>hash {String} If you want checksums calculated for incoming files, set this to either ‘sha1’ or ‘md5’, default false</li><li>multiples {Boolean} Multiple file uploads or no, default true</li><li>onFileBegin {Function} Special callback on file begin. The function is executed directly by formidable. It can be used to rename files before saving them to disk.</li></ul><h3 id="koa-static"><a href="#koa-static" class="headerlink" title="koa-static"></a>koa-static</h3><p>提供直接访问静态文件的中间件，通过 url 访问的路径是绝对真实路径，如果想设置路径别名，请使用 <a href="https://github.com/koajs/mount" target="_blank" rel="noopener">koa-mount</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const serve = require(<span class="string">'koa-static'</span>);</span><br><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">// $ GET /package.json</span><br><span class="line">app.use(serve(<span class="string">'.'</span>));</span><br><span class="line"></span><br><span class="line">// $ GET /hello.txt</span><br><span class="line">app.use(serve(<span class="string">'test/fixtures'</span>));</span><br><span class="line"></span><br><span class="line">// or use absolute paths</span><br><span class="line">app.use(serve(__dirname + <span class="string">'/test/fixtures'</span>));</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'listening on port 3000'</span>);</span><br></pre></td></tr></table></figure><h3 id="koa-views"><a href="#koa-views" class="headerlink" title="koa-views"></a>koa-views</h3><p>动态模板渲染中间件，支持很多模板引擎，例如：<br>ejs，handlebars，pug，react 等等，<a href="https://github.com/tj/consolidate.js#supported-template-engines" target="_blank" rel="noopener">支持列表</a><br><a href="https://github.com/queckezz/koa-views" target="_blank" rel="noopener">参考</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var views = require(<span class="string">'koa-views'</span>);</span><br><span class="line"></span><br><span class="line">const render = views(__dirname + <span class="string">'/views'</span>, &#123;</span><br><span class="line">  map: &#123;</span><br><span class="line">    html: <span class="string">'underscore'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Must be used before any router is used</span><br><span class="line">app.use(render)</span><br><span class="line">// OR Expand by app.context</span><br><span class="line">// No order restrictions</span><br><span class="line">// app.context.render = render()</span><br><span class="line"></span><br><span class="line">app.use(async <span class="keyword">function</span> (ctx) &#123;</span><br><span class="line">  ctx.state = &#123;</span><br><span class="line">    session: this.session,</span><br><span class="line">    title: <span class="string">'app'</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  await ctx.render(<span class="string">'user'</span>, &#123;</span><br><span class="line">    user: <span class="string">'John'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="koa2-cors"><a href="#koa2-cors" class="headerlink" title="koa2-cors"></a>koa2-cors</h3><p>支持客户端跨越请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">var cors = require(<span class="string">'koa2-cors'</span>);</span><br><span class="line"></span><br><span class="line">var app = new Koa();</span><br><span class="line">app.use(cors());</span><br><span class="line">app.use(cors(&#123;</span><br><span class="line">  origin: <span class="keyword">function</span>(ctx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.url === <span class="string">'/test'</span>) &#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'*'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  exposeHeaders: [<span class="string">'WWW-Authenticate'</span>, <span class="string">'Server-Authorization'</span>],</span><br><span class="line">  maxAge: 5,</span><br><span class="line">  credentials: <span class="literal">true</span>,</span><br><span class="line">  allowMethods: [<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'DELETE'</span>],</span><br><span class="line">  allowHeaders: [<span class="string">'Content-Type'</span>, <span class="string">'Authorization'</span>, <span class="string">'Accept'</span>],</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="winston-winston-daily-rotate-file"><a href="#winston-winston-daily-rotate-file" class="headerlink" title="winston + winston-daily-rotate-file"></a>winston + winston-daily-rotate-file</h3><p>log 输出到日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">var winston = require(<span class="string">"winston"</span>);</span><br><span class="line">require(<span class="string">"winston-daily-rotate-file"</span>);</span><br><span class="line"></span><br><span class="line">var debugTransport = new winston.transports.DailyRotateFile(&#123;</span><br><span class="line">  filename: <span class="string">"logs/debug-%DATE%.log"</span>,</span><br><span class="line">  datePattern: <span class="string">"YYYY-MM-DD"</span>,</span><br><span class="line">  zippedArchive: <span class="literal">true</span>,</span><br><span class="line">  level: <span class="string">"debug"</span>,</span><br><span class="line">  maxSize: <span class="string">"20m"</span>,</span><br><span class="line">  maxFiles: <span class="string">"14d"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var errorTransport = new winston.transports.DailyRotateFile(&#123;</span><br><span class="line">  filename: <span class="string">"logs/error-%DATE%.log"</span>,</span><br><span class="line">  datePattern: <span class="string">"YYYY-MM-DD"</span>,</span><br><span class="line">  zippedArchive: <span class="literal">true</span>,</span><br><span class="line">  level: <span class="string">"error"</span>,</span><br><span class="line">  maxSize: <span class="string">"20m"</span>,</span><br><span class="line">  maxFiles: <span class="string">"14d"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var infoTransport = new winston.transports.DailyRotateFile(&#123;</span><br><span class="line">  filename: <span class="string">"logs/info-%DATE%.log"</span>,</span><br><span class="line">  datePattern: <span class="string">"YYYY-MM-DD"</span>,</span><br><span class="line">  zippedArchive: <span class="literal">true</span>,</span><br><span class="line">  level: <span class="string">"info"</span>,</span><br><span class="line">  maxSize: <span class="string">"20m"</span>,</span><br><span class="line">  maxFiles: <span class="string">"14d"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const formatter = winston.format.combine(</span><br><span class="line">  // string use util.format</span><br><span class="line">  winston.format.splat(),</span><br><span class="line">  // timestamp to format</span><br><span class="line">  winston.format.timestamp(&#123;</span><br><span class="line">    format: <span class="string">"YYYY-MM-DD HH:mm:ss.SSS"</span></span><br><span class="line">  &#125;),</span><br><span class="line">  winston.format.printf(info =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> `<span class="variable">$&#123;info.timestamp&#125;</span> <span class="variable">$&#123;info.level&#125;</span>:<span class="variable">$&#123;info.message&#125;</span>`;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const logger = winston.createLogger(&#123;</span><br><span class="line">  level: <span class="string">"info"</span>,</span><br><span class="line">  format: formatter,</span><br><span class="line">  transports: [</span><br><span class="line">    //</span><br><span class="line">    // - Write to all logs with level `info` and below to `combined.log`</span><br><span class="line">    // - Write all logs error (and below) to `error.log`.</span><br><span class="line">    //</span><br><span class="line">    errorTransport,</span><br><span class="line">    infoTransport,</span><br><span class="line">    debugTransport</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = logger;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
          <category> koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa2从入门到精通2</title>
      <link href="/2020/07/24/koa2/"/>
      <url>/2020/07/24/koa2/</url>
      
        <content type="html"><![CDATA[<h3 id="中间件介绍"><a href="#中间件介绍" class="headerlink" title="中间件介绍"></a>中间件介绍</h3><p>Koa2 中，中间件其实就是一个异步函数，有两个参数，第一个是上下文，第二个是 next 函数，next 会贯穿应用程序的 request-response 生命周期。</p><p>它的执行规则是由外向内，再由内向外，参考上节的图片洋葱模型~<br>我们来分析一下源码，看它是如何实现的。并且手写一个简单版的 koa</p><br><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>先看 koa 的简单例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const Koa = require(<span class="string">"koa"</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  await next();</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.log(3);</span><br><span class="line">  await next();</span><br><span class="line">  console.log(4);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(async (ctx, next) =&gt; &#123;</span><br><span class="line">  console.log(5);</span><br><span class="line">  await next();</span><br><span class="line">  console.log(6);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>调用结果打印出 1,3,5,6,4,2</p><br>开始看源码，打开源码下的 application.js，包含了一个 Application class，它的构造函数内有一个内部变量值是一个数组，这个就是所有中间件最终存放的地方。<p>因为主要是讲中间件，所以我们简化一下这个 class，简化如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Application &#123;</span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    this.middleware = [];</span><br><span class="line">  &#125;</span><br><span class="line">  listen(...args) &#123;</span><br><span class="line">    const server = http.createServer(this.callback());</span><br><span class="line">    <span class="built_in">return</span> server.listen(...args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  use(fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeof fn !== <span class="string">"function"</span>)</span><br><span class="line">      throw new TypeError(<span class="string">"middleware must be a function!"</span>);</span><br><span class="line">    <span class="comment"># if (isGeneratorFunction(fn)) &#123;</span></span><br><span class="line">    <span class="comment">#   deprecate(</span></span><br><span class="line">    <span class="comment">#     "Support for generators will be removed in v3. " +</span></span><br><span class="line">    <span class="comment">#       "See the documentation for examples of how to convert old middleware " +</span></span><br><span class="line">    <span class="comment">#       "https://github.com/koajs/koa/blob/master/docs/migration.md"</span></span><br><span class="line">    <span class="comment">#   );</span></span><br><span class="line">    <span class="comment">#   fn = convert(fn);</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    this.middleware.push(fn);</span><br><span class="line">    <span class="built_in">return</span> this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">callback</span></span>() &#123;</span><br><span class="line">    const fn = compose(this.middleware);</span><br><span class="line">    const handleRequest = (req, res) =&gt; &#123;</span><br><span class="line">      const ctx = this.createContext(req, res);</span><br><span class="line">      <span class="built_in">return</span> this.handleRequest(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> handleRequest;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    const res = ctx.res;</span><br><span class="line">    const onerror = (err) =&gt; ctx.onerror(err);</span><br><span class="line">    <span class="built_in">return</span> fnMiddleware(ctx).catch(onerror);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createContext(req, res) &#123;</span><br><span class="line">    const ctx = &#123; req, res &#125;;</span><br><span class="line">    <span class="built_in">return</span> &#123; ctx &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类函数不多，且定义都比较明确，实例化的时候先初始化一个空的数组用来存放中间件，接下来是一个 listen 函数，调用 http 模块创建 Server 传入自定义 callback，然后监听端口。后面是一个我们经常使用的 Use 方法，代码很简单，仅仅是 push 到构造函数中定义的数组。然后后面是一个 callback 函数，核心代码就在这个 compose 函数中，该函数的源码单独定义在 koa-compose 模块中，稍后讲到，然后 callback 返回一个 handleRequest，内部调用自己的定义的 handleRequest，传入上下文和一个 fn。这就是 koa 中间件的核心逻辑。接下来讲下 compose</p><p>打开 compose 源码，下面就一个 index.js，且不包含其他任何模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> compose (middleware) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!Array.isArray(middleware)) throw new TypeError(<span class="string">'Middleware stack must be an array!'</span>)</span><br><span class="line">  <span class="keyword">for</span> (const fn of middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeof fn !== <span class="string">'function'</span>) throw new TypeError(<span class="string">'Middleware must be composed of functions!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> <span class="keyword">function</span> (context, next) &#123;</span><br><span class="line">    <span class="built_in">let</span> index = -1</span><br><span class="line">    <span class="built_in">return</span> dispatch(0)</span><br><span class="line">    <span class="keyword">function</span> dispatch (i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="built_in">return</span> Promise.reject(new Error(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="built_in">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="built_in">return</span> Promise.resolve()</span><br><span class="line">      try &#123;</span><br><span class="line">        <span class="built_in">return</span> Promise.resolve(fn(context, dispatch.bind(null, i + 1)));</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        <span class="built_in">return</span> Promise.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数内部先循环遍历一遍所有中间件，检查中间件是否都是函数，然后返回一个函数，在该函数内部调用内部定义的 dispatch，从 0 开始，获取第一个中间件，然后调用这个中间件，中间件需要传入两个参数，当前上下文，第二个参数是 next 函数，作者使用 dispatch.bind(null, i + 1)来获取下一个中间价作为当前 next 函数的参数，因此也就是一个异步中间件，支持 await 调用。<br>所以，一个请求进来首先进入 callback 内部的 handleRequest 函数，然后第一步获取上下文，第二步调用 handleRequest 传入上下文和 fn，从 compose 源码可知，fn 是 compose 返回的一个函数，所以在 handleRequest 中，调用 fnMiddleware 传入 ctx，第二个参数没传默认为 undefined。然后进入 compose 返回的函数，在函数内部首先调用 dispatch(0)，因为是普通函数，所以会有变量名提示，进入 dispatch，获取第 1 个中间件函数，然后是一些容错判断。最后调用 Promise.resove()执行第 1 个中间件，我们知道中间件有两个参数 ctx,next，所以第一个参数上下文，第二个则是传入一个 dispatch，参数为(i+1)，也就是 next 参数，因为 dispatch 返回的是一个 Promise.resolve()所以支持 await 调用，这个时候进入用户自己写的第一个中间件代码，执行 await next()，如此反复，到最后去取超过数组长度的 fn，为 undefined，则直接 resolve 返回。在这段代码里有个逻辑判断 i &lt;= index，请求进来这里的 index 设为-1，使用闭包原理，会一直贯穿着这次请求，最后 index 指向最后一个，i 作为局部参数，存在每个 dispatch 内，所以遇到一个中间件两次调用 next，那么 i 肯定是小于等于 index 的。这就是 koa 中间件执行的核心逻辑。</p><p>将上面的两段代码合并，也是一个能简单工作的 koa 啦！</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
          <category> koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的load 和 domcontentloaded区别</title>
      <link href="/2020/07/24/domcontentload/"/>
      <url>/2020/07/24/domcontentload/</url>
      
        <content type="html"><![CDATA[<p>DOMContentLoaded 和 load 都是页面加载的时候触发的事件。区别在于触发的时机不一样。</p><blockquote><p>浏览器渲染页面 DOM 文档加载的步骤：</p></blockquote><p>1.解析 HTML 结构。</p><p>2.加载外部脚本和 css 文件。</p><p>3.解析并执行脚本代码。</p><p>4.DOM 树构建完成。(此时会触发 DOMContentLoaded 事件)</p><p>5.加载外部图片等文件。</p><p>6.异步加载的外部 js 等。</p><p>6.页面加载完毕。(此时会触发 load 事件)</p><p>从以上 DOM 文档加载步骤上可以看出；当浏览器把 DOM 树构建完成后就开始触发了 DOMContentLoaded 事件，而 load 事件则要等包括图片这些加载完毕才会触发。</p><p>我们监听事件的时候把优先级高的可以先监听 DOMContentLoaded 再监听 load。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pm2常用命令配置及原理</title>
      <link href="/2020/07/24/pm2/"/>
      <url>/2020/07/24/pm2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>pm2 介绍</p></blockquote><p>PM2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p><blockquote><p>pm2 原理</p></blockquote><p>Node.js 的 Cluster 多进程模式。 PM2 的实现原理，它是基于 Cluster 模式的封装。</p><h4 id="Node-js-的-cluster-模块"><a href="#Node-js-的-cluster-模块" class="headerlink" title="Node.js 的 cluster 模块"></a>Node.js 的 cluster 模块</h4><p>Cluster 会创建一个 master，然后根据你指定的数量复制出多个 server app（也被称之为工作线程）。它通过 IPC 通道与工作线程之间进行通信，并使用内置的负载均衡来更好地处理线程之间的压力，该负载均衡使用了 Round-robin 算法（也被称之为循环算法）。</p><p>当使用 Round-robin 调度策略时，master accepts()所有传入的连接请求，然后将相应的 TCP 请求处理发送给选中的工作线程（该方式仍然通过 IPC 来进行通信）。<a href="https://www.cnblogs.com/accordion/p/7207740.html" target="_blank" rel="noopener">参考文章</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var cluster = require(<span class="string">'cluster'</span>);</span><br><span class="line">var http    = require(<span class="string">'http'</span>);</span><br><span class="line">var os      = require(<span class="string">'os'</span>);</span><br><span class="line"></span><br><span class="line">var numCPUs = os.cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  // Master:</span><br><span class="line">  // Let<span class="string">'s fork as many workers as you have CPU cores</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  for (var i = 0; i &lt; numCPUs; ++i) &#123;</span></span><br><span class="line"><span class="string">      cluster.fork();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125; else &#123;</span></span><br><span class="line"><span class="string">  // Worker:</span></span><br><span class="line"><span class="string">  // Let'</span>s spawn a HTTP server</span><br><span class="line">  // (Workers can share any TCP connection.</span><br><span class="line">  //  In this <span class="keyword">case</span> its a HTTP server)</span><br><span class="line"></span><br><span class="line">  http.createServer(<span class="keyword">function</span>(req, res) &#123;</span><br><span class="line">    res.writeHead(200);</span><br><span class="line">    res.end(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;).listen(8080);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，会发现 Master 进程仅仅 fork 出了子进程，并没有创建 httpserver，而子进程却创建了多个 server。</p><h5 id="cluster-js"><a href="#cluster-js" class="headerlink" title="cluster.js"></a>cluster.js</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const childOrMaster = <span class="string">'NODE_UNIQUE_ID'</span> <span class="keyword">in</span> process.env ? <span class="string">'child'</span> : <span class="string">'master'</span>;</span><br><span class="line">module.exports = require(`internal/cluster/<span class="variable">$&#123;childOrMaster&#125;</span>`);</span><br></pre></td></tr></table></figure><p>cluster.js 源码可以看出，有 NODE_UNIQUE_ID 的是子进程，没有就是 Master 进程。那猜测应该是在 fork 内部对子进程添加了 NODE_UNIQUE_ID。</p><h5 id="主进程-httpserver"><a href="#主进程-httpserver" class="headerlink" title="主进程 httpserver"></a>主进程 httpserver</h5><p>主进程执行完毕后，子进程开始执行响应的代码，子进程首先创建 httpserver，然后监听端口号，而正是这个 listen 方法，暗藏着问题的关键。http 模块 http.server 继承了 net 模块的 net.server，那我们就来看看 net.js 中的 Server.prototype.listen 干了哪些事。</p><img src="/2020/07/24/pm2/1.png" class title="This is an test image"><p>可以猜测出，只有 Master 进程 才去真正做了监听_listen2。如果是子进程，则执行_getserver 函数，该函数位于 lib/internal/cluster/child.js 中，它会传入创建 httpserver 所需要的端口等相关信息，并向主进程发送‘serverQuery’指令，主进程接收到‘serverQuery’指令后，会 new 出一个 RoundRobinHandle 的实例，在这个过程中，主进程服务被创建，端口被监听，子进程被加入到调度度列中。这些完成后，子进程执行回调函数，继续后续操作。</p><h5 id="子进程-内部实现"><a href="#子进程-内部实现" class="headerlink" title="子进程 内部实现"></a>子进程 内部实现</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> rr(message, indexesKey, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.errno)</span><br><span class="line">    <span class="built_in">return</span> cb(message.errno, null);</span><br><span class="line"></span><br><span class="line">  var key = message.key;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> listen(backlog) &#123;</span><br><span class="line">    // TODO(bnoordhuis) Send a message to the master that tells it to</span><br><span class="line">    // update the backlog size. The actual backlog should probably be</span><br><span class="line">    // the largest requested size by any worker.</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">  &#125;</span><br><span class="line">  //...</span><br><span class="line">  const handle = &#123; close, listen, ref: noop, unref: noop &#125;;</span><br><span class="line">  handles[key] = handle;</span><br><span class="line">  cb(0, handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 listen 方法直接返回 0，并没有去侦听端口。最后，调用 cb 函数，将 fake 后的 handle 传递给上层 net.Server，设置 net.Server 对底层的 socket 的引用。此后，子进程利用 fake 后的 handle 做端口侦听（其实压根啥都没有做），执行成功后返回。</p><h5 id="client-通过-tcp-连接向主进程发送请求，那主进程又是如何将请求传递给子进程处理呢？"><a href="#client-通过-tcp-连接向主进程发送请求，那主进程又是如何将请求传递给子进程处理呢？" class="headerlink" title="client 通过 tcp 连接向主进程发送请求，那主进程又是如何将请求传递给子进程处理呢？"></a>client 通过 tcp 连接向主进程发送请求，那主进程又是如何将请求传递给子进程处理呢？</h5><p>子进程 TCP 服务器没有创建底层 socket，它主要依赖 IPC 通道与主进程通信，既然主进程负责接受客户端请求，那么理所应当由主进程分发客户端请求给某个子进程，由子进程处理请求。具体分配给哪个子进程处理，是由 round-robbine 分发策略来决定的。由于子进程在 server 中设置了对底层的 socket 的引用，所以子进程接收到任务后，触发 connection 事件开始执行业务逻辑。</p><h3 id="pm2-流程总结"><a href="#pm2-流程总结" class="headerlink" title="pm2 流程总结"></a>pm2 流程总结</h3><ul><li><p>cluster 在创建子进程时，会在环境变量中增加标识，以此来区分主进程和子进程</p></li><li><p>listen 函数在实现时对主进程和子进程进行了区分，在不同的进程中会执行不同操作</p></li><li><p>nodeJS 封装了进程间通信的方法，支持在进程间发送句柄的功能，句柄可以是一个 socket 对象，一个管道等等</p></li><li><p>一个端口只能被一个进程监听，但是该端口可以建立多个连接(accpet 是产生的套接字)，不同进程间可以共享这些套接字</p></li><li><p>子进程的 listen 函数并没有监听端口，它在 listen 时将端口和地址等信息发送给主进程，由主进程进行监听。</p></li></ul><h6 id="主进程在收到-accept-事件时，产生连接-socket，并把它发送给子进程。子进程直接通过该-socket-跟-client-端进行通信"><a href="#主进程在收到-accept-事件时，产生连接-socket，并把它发送给子进程。子进程直接通过该-socket-跟-client-端进行通信" class="headerlink" title="主进程在收到 accept 事件时，产生连接 socket，并把它发送给子进程。子进程直接通过该 socket 跟 client 端进行通信"></a>主进程在收到 accept 事件时，产生连接 socket，并把它发送给子进程。子进程直接通过该 socket 跟 client 端进行通信</h6><br><blockquote><p>pm2 常用的命令行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ pm2 start app.js <span class="comment"># 启动 app.js 应用程序</span></span><br><span class="line"></span><br><span class="line">$ pm2 start app.js -i 4 <span class="comment"># cluster mode 模式启动 4 个 app.js 的应用实例 # 4 个应用程序会自动进行负载均衡</span></span><br><span class="line"></span><br><span class="line">$ pm2 start app.js --name=<span class="string">"api"</span> <span class="comment"># 启动应用程序并命名为 "api"</span></span><br><span class="line"></span><br><span class="line">$ pm2 start app.js --watch <span class="comment"># 当文件变化时自动重启应用</span></span><br><span class="line"></span><br><span class="line">$ pm2 start script.sh <span class="comment"># 启动 bash 脚本</span></span><br><span class="line"></span><br><span class="line">$ pm2 list <span class="comment"># 列表 PM2 启动的所有的应用程序</span></span><br><span class="line"></span><br><span class="line">$ pm2 monit <span class="comment"># 显示每个应用程序的 CPU 和内存占用情况</span></span><br><span class="line"></span><br><span class="line">$ pm2 show [app-name] <span class="comment"># 显示应用程序的所有信息</span></span><br><span class="line"></span><br><span class="line">$ pm2 logs <span class="comment"># 显示所有应用程序的日志</span></span><br><span class="line"></span><br><span class="line">$ pm2 logs [app-name] <span class="comment"># 显示指定应用程序的日志</span></span><br><span class="line"></span><br><span class="line">$ pm2 flush</span><br><span class="line"></span><br><span class="line">$ pm2 stop all <span class="comment"># 停止所有的应用程序</span></span><br><span class="line"></span><br><span class="line">$ pm2 stop 0 <span class="comment"># 停止 id 为 0 的指定应用程序</span></span><br><span class="line"></span><br><span class="line">$ pm2 restart all <span class="comment"># 重启所有应用</span></span><br><span class="line"></span><br><span class="line">$ pm2 reload all <span class="comment"># 重启 cluster mode 下的所有应用</span></span><br><span class="line"></span><br><span class="line">$ pm2 gracefulReload all <span class="comment"># Graceful reload all apps in cluster mode</span></span><br><span class="line"></span><br><span class="line">$ pm2 delete all <span class="comment"># 关闭并删除所有应用</span></span><br><span class="line"></span><br><span class="line">$ pm2 delete 0 <span class="comment"># 删除指定应用 id 0</span></span><br><span class="line"></span><br><span class="line">$ pm2 scale api 10 <span class="comment"># 把名字叫 api 的应用扩展到 10 个实例</span></span><br><span class="line"></span><br><span class="line">$ pm2 reset [app-name] <span class="comment"># 重置重启数量</span></span><br><span class="line"></span><br><span class="line">$ pm2 startup <span class="comment"># 创建开机自启动命令</span></span><br><span class="line"></span><br><span class="line">$ pm2 save <span class="comment"># 保存当前应用列表</span></span><br><span class="line"></span><br><span class="line">$ pm2 resurrect <span class="comment"># 重新加载保存的应用列表</span></span><br><span class="line"></span><br><span class="line">$ pm2 update <span class="comment"># Save processes, kill PM2 and restore processes</span></span><br><span class="line"></span><br><span class="line">$ pm2 generate <span class="comment"># Generate a sample json configuration file</span></span><br><span class="line"></span><br><span class="line">$ pm2 deploy app.json prod setup <span class="comment"># Setup "prod" remote server</span></span><br><span class="line"></span><br><span class="line">$ pm2 deploy app.json prod <span class="comment"># Update "prod" remote server</span></span><br><span class="line"></span><br><span class="line">$ pm2 deploy app.json prod revert 2 <span class="comment"># Revert "prod" remote server by 2</span></span><br><span class="line"></span><br><span class="line">$ pm2 module:generate [name] <span class="comment"># Generate sample module with name [name]</span></span><br><span class="line"></span><br><span class="line">$ pm2 install pm2-logrotate <span class="comment"># Install module (here a log rotation system)</span></span><br><span class="line"></span><br><span class="line">$ pm2 uninstall pm2-logrotate <span class="comment"># Uninstall module</span></span><br><span class="line"></span><br><span class="line">$ pm2 publish <span class="comment"># Increment version, git push and npm publish</span></span><br><span class="line"></span><br><span class="line">$ pm2 start big-array.js --max-memory-restart 20M   <span class="comment"># 在超过使用内存上限后自动重启</span></span><br></pre></td></tr></table></figure><br><blockquote><p>pm2 自定义配置文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"apps"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"wuwu"</span>,                             // 项目名</span><br><span class="line">      <span class="string">"script"</span>: <span class="string">"./bin/www"</span>,                      // 执行文件</span><br><span class="line">      <span class="string">"cwd"</span>: <span class="string">"./"</span>,                                // 根目录</span><br><span class="line">      <span class="string">"args"</span>: <span class="string">""</span>,                                 // 传递给脚本的参数</span><br><span class="line">      <span class="string">"interpreter"</span>: <span class="string">""</span>,                          // 指定的脚本解释器</span><br><span class="line">      <span class="string">"interpreter_args"</span>: <span class="string">""</span>,                     // 传递给解释器的参数</span><br><span class="line">      <span class="string">"watch"</span>: <span class="literal">true</span>,                              // 是否监听文件变动然后重启</span><br><span class="line">      <span class="string">"ignore_watch"</span>: [                           // 不用监听的文件</span><br><span class="line">          <span class="string">"node_modules"</span>,</span><br><span class="line">          <span class="string">"logs"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"exec_mode"</span>: <span class="string">"cluster_mode"</span>,                // 应用启动模式，支持fork和cluster模式</span><br><span class="line">      <span class="string">"instances"</span>: 4,                             // 应用启动实例个数，仅在cluster模式有效 默认为fork；或者 max</span><br><span class="line">      <span class="string">"max_memory_restart"</span>: 8,                    // 最大内存限制数，超出自动重启</span><br><span class="line">      <span class="string">"error_file"</span>: <span class="string">"./logs/app-err.log"</span>,         // 错误日志文件</span><br><span class="line">      <span class="string">"out_file"</span>: <span class="string">"./logs/app-out.log"</span>,           // 正常日志文件</span><br><span class="line">      <span class="string">"merge_logs"</span>: <span class="literal">true</span>,                         // 设置追加日志而不是新建日志</span><br><span class="line">      <span class="string">"log_date_format"</span>: <span class="string">"YYYY-MM-DD HH:mm:ss"</span>,   // 指定日志文件的时间格式</span><br><span class="line">      <span class="string">"min_uptime"</span>: <span class="string">"60s"</span>,                        // 应用运行少于时间被认为是异常启动</span><br><span class="line">      <span class="string">"max_restarts"</span>: 30,                         // 最大异常重启次数，即小于min_uptime运行时间重启次数；</span><br><span class="line">      <span class="string">"autorestart"</span>: <span class="literal">true</span>,                        // 默认为<span class="literal">true</span>, 发生异常的情况下自动重启</span><br><span class="line">      <span class="string">"cron_restart"</span>: <span class="string">""</span>,                         // crontab时间格式重启应用，目前只支持cluster模式;</span><br><span class="line">      <span class="string">"restart_delay"</span>: <span class="string">"60s"</span>                      // 异常重启情况下，延时重启时间</span><br><span class="line">      <span class="string">"env"</span>: &#123;</span><br><span class="line">          <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span>,                // 环境参数，当前指定为生产环境 process.env.NODE_ENV</span><br><span class="line">          <span class="string">"REMOTE_ADDR"</span>: <span class="string">"爱上大声地"</span>               // process.env.REMOTE_ADDR</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"env_dev"</span>: &#123;</span><br><span class="line">          <span class="string">"NODE_ENV"</span>: <span class="string">"development"</span>,              // 环境参数，当前指定为开发环境 pm2 start app.js --env_dev</span><br><span class="line">          <span class="string">"REMOTE_ADDR"</span>: <span class="string">""</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"env_test"</span>: &#123;                               // 环境参数，当前指定为测试环境 pm2 start app.js --env_test</span><br><span class="line">          <span class="string">"NODE_ENV"</span>: <span class="string">"test"</span>,</span><br><span class="line">          <span class="string">"REMOTE_ADDR"</span>: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
          <category> pm2 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Koa2从入门到精通1</title>
      <link href="/2020/07/23/koa/"/>
      <url>/2020/07/23/koa/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。<br>Koa 比 express 更轻量级，默认不包含任何中间件，都需要手动添加。启动一个简单的 Koa 服务只需要几行代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><h4 id="Koa-中间件"><a href="#Koa-中间件" class="headerlink" title="Koa 中间件"></a>Koa 中间件</h4><p>Koa 中间件是以一种类似堆栈的方式组织和执行的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">// logger</span><br><span class="line"></span><br><span class="line">app.use(async (ctx, next) =&gt; &#123;</span><br><span class="line">  await next();</span><br><span class="line">  const rt = ctx.response.get(<span class="string">'X-Response-Time'</span>);</span><br><span class="line">  console.log(`<span class="variable">$&#123;ctx.method&#125;</span> <span class="variable">$&#123;ctx.url&#125;</span> - <span class="variable">$&#123;rt&#125;</span>`);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// x-response-time</span><br><span class="line"></span><br><span class="line">app.use(async (ctx, next) =&gt; &#123;</span><br><span class="line">  const start = Date.now();</span><br><span class="line">  await next();</span><br><span class="line">  const ms = Date.now() - start;</span><br><span class="line">  ctx.set(<span class="string">'X-Response-Time'</span>, `<span class="variable">$&#123;ms&#125;</span>ms`);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// response</span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>以上面 “Hello World” 的响应作为示例，当请求开始时首先请求流通过 x-response-time 和 logging 中间件，然后继续移交控制给 response 中间件。当一个中间件调用 next() 则该函数暂停并将控制传递给定义的下一个中间件。当在下游没有更多的中间件执行后，堆栈将展开并且每个中间件恢复执行其上游行为。<br>可以用一张图片来说明，洋葱模型，中间件的执行顺序就是从左到右</p><img src="/2020/07/23/koa/1.png" class><br><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>app 实例上的一些设置，目前支持如下：</p><ul><li>app.env 默认是 NODE_ENV 或 “development”</li><li>app.keys 签名的 cookie 密钥数组</li><li>app.proxy 当真正的代理头字段将被信任时</li><li>忽略 .subdomains 的 app.subdomainOffset 偏移量，默认为 2</li><li>app.proxyIpHeader 代理 ip 消息头, 默认为 X-Forwarded-For</li><li>app.maxIpsCount 从代理 ip 消息头读取的最大 ips, 默认为 0 (代表无限)</li></ul><p>设置参数的方式有两种，一种是通过构造函数的方式，以参数形式传入，另一种是通过动态给实例的 app 进行赋值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const app = new Koa(&#123; proxy: <span class="literal">true</span> &#125;);</span><br><span class="line">app.proxy = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>简单介绍下重用的几个，keys，proxy,proxyIpHeader</p><blockquote><p>app.keys</p></blockquote><p>该值接收一个数组，为什么要设置成一个数组呢，先来考虑以下的一种场景，当希望更换密钥的时候，原有的的 cookie 都将因为密钥更新而导致校验失败，则用户的登录状态失效。一次还好，如果需要经常需要更新密钥，那怎么处理好？这就是 app.keys 为配置为数组的使用逻辑了。<br>当生成 cookie 时，使用 keys 中的第一个元素来生成，而校验的时候，是从第一个至最后一个，一个个的校验，直到通过为止，所以在更新密钥的时候，只需要把新的密钥加到数组第一位则可以。一般再保留两组密钥，因为更新是一个月一次，因此如果客户的 cookie 是三个月前生成的，那就会失效了。<br>cookie 的校验是基于 <a href="https://github.com/crypto-utils/keygrip" target="_blank" rel="noopener">keygrip</a> 来处理的，大家也可以使用它来做自己的一些数据校验，如验证码之类。</p><p>看下设置了 keys 以后，cookies 的生成情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(<span class="string">"koa"</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.keys = [<span class="string">"token"</span>];</span><br><span class="line">// app.keys = new KeyGrip([<span class="string">'im a newer secret'</span>, <span class="string">'i like turtle'</span>], <span class="string">'sha256'</span>); //自定义加密方式</span><br><span class="line"><span class="built_in">let</span> cookieKey = <span class="string">'name'</span></span><br><span class="line">app.use(async (ctx) =&gt; &#123;</span><br><span class="line">  <span class="built_in">let</span> value = ctx.cookies.get(cookieKey, &#123; signed: <span class="literal">true</span> &#125;);</span><br><span class="line">  console.log(value)</span><br><span class="line"></span><br><span class="line">  ctx.cookies.set(cookieKey, <span class="string">"test"</span>, &#123; signed: <span class="literal">true</span> &#125;);</span><br><span class="line">  ctx.body = <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>在设置 name 这个 cookie 的时候，koa 会以 name 的值 test 加上设置的密钥，生成校验值，并写入至 name.sig 这个 cookie 中，所以能看到响应的 HTTP 头中如下所示：</p><img src="/2020/07/23/koa/2.png" class><p>在后续的请求中，获取 name 这个 cookie 时，则会根据 name.sig 的值判断是否合法，安全性上又明显提升。</p><blockquote><p>proxyIpHeader</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const app = new Koa(&#123;</span><br><span class="line">  proxy: <span class="literal">true</span>,</span><br><span class="line">  proxyIpHeader: <span class="string">'X-Real-IP'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>maxIpsCount</p></blockquote><p>如果您确切知道服务器前面有多少个反向代理，则可以通过配置 app.maxIpsCount 来避免读取用户的伪造的请求头：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const app = new Koa(&#123;</span><br><span class="line">  proxy: <span class="literal">true</span>,</span><br><span class="line">  maxIpsCount: 1, // 服务器前只有一个代理</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// request.header[<span class="string">'X-Forwarded-For'</span>] === [ <span class="string">'127.0.0.1'</span>, <span class="string">'127.0.0.2'</span> ];</span><br><span class="line">// ctx.ips === [ <span class="string">'127.0.0.2'</span> ];</span><br></pre></td></tr></table></figure><br><h3 id="app-listen-…"><a href="#app-listen-…" class="headerlink" title="app.listen(…)"></a>app.listen(…)</h3><p>Koa 应用程序不是 HTTP 服务器的 1 对 1 展现。 可以将一个或多个 Koa 应用程序安装在一起以形成具有单个 HTTP 服务器的更大应用程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const https = require(<span class="string">'https'</span>);</span><br><span class="line">const Koa = require(<span class="string">'koa'</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line">http.createServer(app.callback()).listen(3000);</span><br><span class="line">https.createServer(app.callback()).listen(3001);</span><br></pre></td></tr></table></figure><blockquote><p>app.callback()</p></blockquote><p>返回适用于 http.createServer() 方法的回调函数来处理请求。你也可以使用此回调函数将 koa 应用程序挂载到 Connect/Express 应用程序中。</p><h3 id="app-context"><a href="#app-context" class="headerlink" title="app.context"></a>app.context</h3><p>app.context 是从其创建 ctx 的原型。您可以通过编辑 app.context 为 ctx 添加其他属性。这对于将 ctx 添加到整个应用程序中使用的属性或方法非常有用，这可能会更加有效（不需要中间件）和/或 更简单（更少的 require()），而更多地依赖于 ctx，这可以被认为是一种反模式。</p><p>例如，要从 ctx 添加对数据库的引用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.context.db = db();</span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">  console.log(ctx.db);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>默认情况下，将所有错误输出到 stderr，除非 app.silent 为 true。 当 err.status 是 404 或 err.expose 是 true 时默认错误处理程序也不会输出错误。 要执行自定义错误处理逻辑，如集中式日志记录，您可以添加一个 “error” 事件侦听器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">  log.error(<span class="string">'server error'</span>, err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="上下文-Context"><a href="#上下文-Context" class="headerlink" title="上下文(Context)"></a>上下文(Context)</h2><p>Koa Context 将 node 的 request 和 response 对象封装到单个对象中，为编写 Web 应用程序和 API 提供了许多有用的方法。 这些操作在 HTTP 服务器开发中频繁使用，它们被添加到此级别而不是更高级别的框架，这将强制中间件重新实现此通用功能。</p><p><em>每个</em> 请求都将创建一个 Context，并在中间件中作为接收器引用，或者 ctx 标识符，如以下代码片段所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">  ctx; // 这是 Context</span><br><span class="line">  ctx.request; // 这是 koa Request</span><br><span class="line">  ctx.response; // 这是 koa Response</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为方便起见许多上下文的访问器和方法直接委托给它们的 ctx.request 或 ctx.response ，不然的话它们是相同的。 例如 ctx.type 和 ctx.length 委托给 response 对象，ctx.path 和 ctx.method 委托给 request。<br>注意：绕过 Koa 的 response 处理是 不被支持的. 应避免使用以下 node 属性：<br>res.statusCode<br>res.writeHead()<br>res.write()<br>res.end()</p><br><h3 id="ctx-中一些常用的属性"><a href="#ctx-中一些常用的属性" class="headerlink" title="ctx 中一些常用的属性"></a>ctx 中一些常用的属性</h3><blockquote><p>ctx.state</p></blockquote><p>推荐的命名空间，用于通过中间件传递信息和你的前端视图。<br>ctx.state.user = await User.find(id);</p><blockquote><p>ctx.app</p></blockquote><p>应用程序实例引用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const Koa = require(<span class="string">"koa"</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async (ctx) =&gt; &#123;</span><br><span class="line">  ctx.app === app;</span><br><span class="line">  ctx.body = <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>ctx.app.emit</p></blockquote><p>Koa 应用扩展了内部 EventEmitter。ctx.app.emit 发出一个类型由第一个参数定义的事件。对于每个事件，您可以连接 “listeners”，这是在发出事件时调用的函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const Koa = require(<span class="string">"koa"</span>);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async (ctx) =&gt; &#123;</span><br><span class="line">  ctx.app.emit(<span class="string">"coming"</span>);</span><br><span class="line">  ctx.body = <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">"coming"</span>, (err) =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">"wocha"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><blockquote><p>ctx.cookies</p></blockquote><p>ctx.cookies.get(name, [options])<br>ctx.cookies.set(name, value, [options])<br>options 的参数如下：</p><ul><li>maxAge: 一个数字, 表示从 Date.now() 得到的毫秒数.</li><li>expires: 一个 Date 对象, 表示 cookie 的到期日期 (默认情况下在会话结束时过期).</li><li>path: 一个字符串, 表示 cookie 的路径 (默认是/).</li><li>domain: 一个字符串, 指示 cookie 的域 (无默认值).</li><li>secure: 一个布尔值, 表示 cookie 是否仅通过 HTTPS 发送 (HTTP 下默认为 false, HTTPS 下默认为 true). 阅读有关此参数的更多信息.</li><li>httpOnly: 一个布尔值, 表示 cookie 是否仅通过 HTTP(S) 发送，, 且不提供给客户端 JavaScript (默认为 true).</li><li>sameSite: 一个布尔值或字符串, 表示该 cookie 是否为 “相同站点” cookie (默认为 false). 可以设置为 ‘strict’, ‘lax’, ‘none’, 或 true (映射为 ‘strict’).</li><li>signed: 一个布尔值, 表示是否要对 cookie 进行签名 (默认为 false). 如果为 true, 则还会发送另一个后缀为 .sig 的同名 cookie, 使用一个 27-byte + url-safe base64 SHA1 值来表示针对第一个 Keygrip 键的 cookie-name=cookie-value 的哈希值. 此签名密钥用于检测下次接收 cookie 时的篡改.</li><li>overwrite: 一个布尔值, 表示是否覆盖以前设置的同名的 cookie (默认是 false). 如果是 true, 在同一个请求中设置相同名称的所有 Cookie（无论路径或域）是否在设置此 Cookie 时从 Set-Cookie 消息头中过滤掉.</li></ul><blockquote><p>ctx.throw([status], [msg], [properties])</p></blockquote><p>用来抛出一个包含 .status 属性错误的帮助方法，其默认值为 500。这样 Koa 就可以做出适当地响应。</p><blockquote><p>ctx.assert(value, [status], [msg], [properties])</p></blockquote><p>当 !value 时抛出一个类似 .throw 错误的帮助方法。这与 node 的 assert() 方法类似.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ctx.assert(ctx.state.user, 401, <span class="string">"User not found. Please login!"</span>);</span><br><span class="line">ctx.body = <span class="string">"Hello World"</span>;</span><br></pre></td></tr></table></figure><h3 id="response-body"><a href="#response-body" class="headerlink" title="response.body="></a>response.body=</h3><p>响应体可以设置为以下之一：</p><p>string 写入<br>Buffer 写入<br>Stream 管道<br>Object || Array JSON-字符串化<br>null 无内容响应</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
          <category> koa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs中的Buffer，Stream，binary data</title>
      <link href="/2020/07/23/nodejs/"/>
      <url>/2020/07/23/nodejs/</url>
      
        <content type="html"><![CDATA[<p>我们在使用 nodejs 的过程中，每次遇到 buffer, stream, binary data，不知道大家会不会有点不明白，只知道个大概，像我就是，网上查查资料也是简单介绍要不然然就是跳过，所以一直对他们有敬畏心理，并且在 web 的开发过程中，基本上也不会使用到。<br>如果不想做一名普通的 nodejs 开发者，我们一起来一探究竟。</p><blockquote><p>Buffer</p></blockquote><p>官网解释：<br>mechanism for reading or manipulating streams of binary data. The Buffer class was introduced as part of the Node.js API to make it possible to interact with octet streams in the context of things like TCP streams and file system operations.</p><p>读取或操作 stream 的二进制数据（binary data），可以在一些场景的上下文中操作 stream，比如文件系统，TCP 传输流。</p><blockquote><p>Binary data</p></blockquote><p>也就是 0101，因为计算机的存储，传输都是转换成 0，1 进行操作的。每个 0 或者 1 称为一个 Bit，是计算机中最小的存储单位。如果说要存数字 12，那么计算机就转换成 1100。但是计算机怎么知道怎么去转换呢？其实就是纯粹的数学计算，是数学基础中的一个二进制数子系统，使用一种数字表示另外一种数字，计算机是知道的这个数学运算的。但是我们储存的东西不止数字，还是字符串、图片、音频、视频等。比如 a 在 ascii 字符集 中对应 97，所以一个字符串会变先转成数字，最后转成二进制。</p><p>有两个概念我们需要了解下：<br>字符集（Character Sets），所有的信息对应的数字都预先定义在了字符集中，字符集包括许多，比如：ASCII 字符集、GB2312 字符集、BIG5 字符集、 GB18030 字符集、Unicode 字符集等。</p><p>字符编码（Character Encoding），就是定义的规则，什么数字代表相应的字符，还有就是数字该怎么以二进制来呈现。特别是，多少 bits 来显示一个数字。这就是字符编码。比如：UTF-8 规定字符需要被编码成 bytes，一个 bytes 就代表 8 个 bit。所以前面说的数字 12，在 UTF-8 中就会存储成 00001100。图片、视频也一样，计算机也有对应的规则转变成对的二进制数据。</p><p>现在我们知道了什么是 Binary data</p><blockquote><p>Stream</p></blockquote><p>Stream 在 nodejs 中表示 在一段时间内一连串数据从一个点达到另一个点。比如，你有一个很大的数据需要处理，但是你可以直接开始处理而不用等到所有的数据都加载进内存。<br>基本上这个大数据会被分解然后以 chunks 来发送。所以前面定义所说的(“streams of binary data… in the context of… file system”) ，就是说 一串二进制数据转移到一个文件系统中。比如：移动 file1.txt 里的内容到 file2.txt。<br>前面 buffer 说，读取或操作 stream 的二进制数据，但是 buffer 是怎么帮助我们操作二进制数据流呢？</p><h4 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h4><p>我们已经知道数据流是从一个点到另外一个点，但它们究竟是如何移动的呢，移动中会不会出现混乱？</p><p>数据移动的目的是处理或读取数据，并基于数据做出操作。但是随着时间的推移，一个处理过程可能会占用一个最小和最大的数据量。因此，如果数据到达的速率比进程消耗数据的速率快，那么多余的数据就需要在某个地方等待处理。另一方面，如果进程消耗数据的速度快于到达数据的速度，则较早到达的数据需要等待一定量的数据到达后再发送出去进行处理。<br>这个等候区是缓冲区!它是计算机中的一个小物理位置，通常在 RAM 中，数据在这里被临时收集、等待，并最终在流期间被发送出去进行处理。<br>我们可以将整个流和缓冲过程视为一个公交车站。 在某些公交车站，直到一定数量的乘客到达或直到特定的出发时间，才允许公交车离开。 同样，乘客可能以不同的速度到达不同的时间。 乘客和公交车站都无法控制乘客到达车站的情况。<br>无论如何，较早到达的乘客将需要等到公交车站决定在途中发车。 在公交车已经装载或公交车已经离开的时候到达的乘客需要等待下一辆公交车。</p><p>所以，总会有一个等待的地方。 那就是 Node.js 的缓冲区！ Node.js 无法控制数据到达的速度或时间，即流的速度。 它只能决定何时发送数据。 如果还没来得及，Node.js 会将它们放在缓冲区中的“等待区”（位于 RAM 中的一小部分）中，直到需要将它们发送出去进行处理为止。</p><p>一个典型的例子，你可以看到缓冲区的行动是当你观看在线视频的时候。如果您的网络连接足够快，流的速度将足够快，可以立即填满缓冲区并发送出去进行处理，然后填满另一个缓冲区，然后发送出去，然后再发送一个，再发送一个，直到流完成。但是，如果您的连接速度很慢，则在处理了到达的第一组数据后，视频播放器将显示加载图标，或显示文本“缓冲”，这意味着收集更多数据或等待更多数据到达。 当缓冲区被填满并处理后，播放器将显示数据，视频。 在播放时，更多数据将继续到达并在缓冲区中等待。如果播放器已完成处理或播放先前的数据，并且缓冲区尚未填满，则将再次显示“缓冲”文本，等待收集更多数据进行处理。</p><p>所以，从缓冲区的原始定义来看，它表明在缓冲区中时，我们可以操作或与正在流式传输的二进制数据进行交互。 我们可能会与这种原始二进制数据进行什么样的交互？ Node.js 中的 Buffer 实现为我们提供了可操作的完整列表。 让我们来看一些。</p><h4 id="操作-Buffer"><a href="#操作-Buffer" class="headerlink" title="操作 Buffer"></a>操作 Buffer</h4><p>我们可以创建自己的缓冲区！ 除了 Node.js 在流中自动创建之外，还可以创建和操作自己的缓冲区。创建 buffer 的方式有几种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const buf1 = Buffer.alloc(10);  <span class="comment">#创建一个长度为10的空buffer</span></span><br><span class="line">console.log(buf1);</span><br><span class="line"><span class="comment"># &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span></span><br><span class="line"></span><br><span class="line">const buf2 = Buffer.from(<span class="string">"hello buffer"</span>); <span class="comment">#创建带内容的buffer</span></span><br><span class="line">console.log(buf2);</span><br><span class="line"><span class="comment"># &lt;Buffer 68 65 6c 6c 6f 20 62 75 66 66 65 72&gt;   16进制</span></span><br></pre></td></tr></table></figure><p>有了 Buffer 我们就可以做一些操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">buf1.toJSON()</span><br><span class="line"><span class="comment"># &#123; type: 'Buffer', data: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] &#125;// an empty buffer</span></span><br><span class="line"></span><br><span class="line">buf2.toJSON()</span><br><span class="line"><span class="comment"># &#123; type: 'Buffer',     data: [104, 101, 108, 108, 111, 32, 98, 117, 102, 102, 101, 114]    &#125;  10进制</span></span><br></pre></td></tr></table></figure><p>toJSON()方法是将数据表示为字符的 Unicode 形式.</p><p>往 buffer 写数据，如果写入数据如果超过 buffer 的长度是会被截断的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const buf1 = Buffer.alloc(10)</span><br><span class="line">buf1.write(<span class="string">"hello world"</span>)</span><br><span class="line">console.log(buf1.toJSON())</span><br><span class="line"><span class="comment"># &#123; type: 'Buffer', data: [ 104, 101, 108, 108, 111, 32, 119, 111, 114, 108 ] &#125;</span></span><br><span class="line"></span><br><span class="line">console.log(buf1.toString())</span><br><span class="line"><span class="comment"># hello worl</span></span><br></pre></td></tr></table></figure><p>还有很多 Buffer 的操作，比如：concat，slice，compare 等，具体参考<a href="https://nodejs.org/dist/latest-v8.x/docs/api/buffer.html" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2020/07/23/webpack/"/>
      <url>/2020/07/23/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>本质上，webpack 是一个用于现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。从 v4.0.0 开始，webpack 可以不用再引入一个配置文件来打包项目，然而，它仍然有着 高度可配置性，可以很好满足你的需求。</p><p>一些核心概念</p><ul><li><p>entry<br>webpack 的打包都是从一个入口文件开始的，找到入口文件后，根据入口文件 webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p></li><li><p>output<br>输出转换后的文件，默认位置是./dist</p></li><li><p>loader</p><p>webpack 本质上是 nodejs，所以只能处理 javascript 和 json 文件，有了 loader，才能去加载其他类型的文件，并进行转换。<br>loader 有两个属性：</p><ul><li>test 属性，识别出哪些文件会被转换。</li><li>use 属性，定义出在进行转换时，应该使用哪个 loader。</li></ul></li><li><p>plugin<br>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p></li><li><p>mode</p><p>通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。</p><p>webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）。webpack 的 import() 和 require.ensure() 需要 Promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 提前加载 polyfill。</p></li><li><p>environment</p><p>webpack 运行与 Node.js v8.x+ 版本。</p></li></ul><p>针对以上核心概念，我们进行详细介绍及 demo 演示。</p><h1 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./path/to/my/entry/file.js"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当你向 entry 传入一个数组时会发生什么？向 entry 属性传入文件路径数组，将创建出一个 多主入口(multi-main entry)。在你想要一次注入多个依赖文件，并且将它们的依赖导向(graph)到一个 chunk 时，这种方式就很有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">"./path/to/my/entry/file.js"</span>,</span><br><span class="line">    adminApp: <span class="string">"./src/adminApp.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 webpack &lt; 4 的版本中，通常将 vendor 作为一个单独的入口起点添加到 entry 选项中，以将其编译为一个单独的文件（与 CommonsChunkPlugin 结合使用）。</p><p>而在 webpack 4 中不鼓励这样做。而是使用 optimization.splitChunks 选项，将 vendor 和 app(应用程序) 模块分开，并为其创建一个单独的文件。不要 为 vendor 或其他不是执行起点创建 entry。</p><h1 id="output"><a href="#output" class="headerlink" title="output"></a>output</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果配置中创建出多于一个 “chunk”（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用 占位符(substitutions) 来确保每个文件具有唯一的名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">"./src/app.js"</span>,</span><br><span class="line">    search: <span class="string">"./src/search.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name].js"</span>,</span><br><span class="line">    path: __dirname + <span class="string">"/dist"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入到硬盘：./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure><p>使用 cdn</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">"/home/proj/cdn/assets/[hash]"</span>,</span><br><span class="line">    publicPath: <span class="string">"https://cdn.example.com/assets/[hash]/"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果在编译时，不知道最终输出文件的 publicPath 是什么地址，则可以将其留空，并且在运行时通过入口起点文件中的 <strong>webpack_public_path</strong> 动态设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__webpack_public_path__ = myRuntimePublicPath;</span><br></pre></td></tr></table></figure><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或 “load(加载)” 模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的得力方式。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS 文件！<br>例如，你可以使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//npm install --save-dev css-loader ts-loader</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">"ts-loader"</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>loader 的使用有三种方式</p><ul><li><p>配置方式（推荐）：在 webpack.config.js 文件中指定 loader。</p></li><li><p>内联方式：在每个 import 语句中显式指定 loader。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Styles from &#39;style-loader!css-loader?modules!.&#x2F;styles.css&#39;;</span><br></pre></td></tr></table></figure></li><li><p>CLI 方式：在 shell 命令中指定它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --module-bind pug-loader --module-bind &#39;css&#x3D;style-loader!css-loader&#39;</span><br></pre></td></tr></table></figure></li></ul><h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><p>webpack 插件是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在整个编译生命周期都可以访问 compiler 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pluginName = <span class="string">"ConsoleLogOnBuildWebpackPlugin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsoleLogOnBuildWebpackPlugin</span> </span>&#123;</span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    compiler.hooks.run.tap(pluginName, (compilation) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"webpack 构建过程开始！"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ConsoleLogOnBuildWebpackPlugin;</span><br></pre></td></tr></table></figure><p>使用方式有两种，<br>配置文件引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>); <span class="comment">// 访问内置的插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./path/to/my/entry/file.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"my-first-webpack.bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        use: <span class="string">"babel-loader"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.ProgressPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">"./src/index.html"</span> &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Node api 调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>); <span class="comment">// 访问 webpack 运行时(runtime)</span></span><br><span class="line"><span class="keyword">const</span> configuration = <span class="built_in">require</span>(<span class="string">"./webpack.config.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> compiler = webpack(configuration);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> webpack.ProgressPlugin().apply(compiler);</span><br><span class="line"></span><br><span class="line">compiler.run(<span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h1><p>配置文件可以做很多事情，但是请避免如下操作：</p><ul><li>当使用 webpack CLI 工具时，访问 CLI 参数（应编写自己的 CLI 工具替代，或者使用 –env）</li><li>导出不确定的结果（两次调用 webpack 应产生相同的输出文件）</li><li>编写超长的配置（应将配置文件拆分成多个）</li></ul><h1 id="target"><a href="#target" class="headerlink" title="target"></a>target</h1><p>由于 JavaScript 即可以编写服务端代码也可以编写浏览器代码，所以 webpack 提供了多种部署 target，你可以在 webpack 的配置选项中进行设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  target: <span class="string">"node"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>多 target</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> serverConfig = &#123;</span><br><span class="line">  target: <span class="string">"node"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"lib.node.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//…</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientConfig = &#123;</span><br><span class="line">  target: <span class="string">"web"</span>, <span class="comment">// &lt;=== 默认为 'web'，可省略</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"lib.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//…</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [serverConfig, clientConfig];</span><br></pre></td></tr></table></figure><h1 id="hot-module-replacement"><a href="#hot-module-replacement" class="headerlink" title="hot module replacement"></a>hot module replacement</h1><p>模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p><ul><li>保留在完全重新加载页面期间丢失的应用程序状态。</li><li>只更新变更内容，以节省宝贵的开发时间。</li><li>在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。</li></ul><p>HMR 的工作原理</p><h3 id="在应用程序中"><a href="#在应用程序中" class="headerlink" title="在应用程序中"></a>在应用程序中</h3><p>通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：</p><ol><li>应用程序要求 HMR runtime 检查更新。</li><li>HMR runtime 异步地下载更新，然后通知应用程序。</li><li>应用程序要求 HMR runtime 应用更新。</li><li>HMR runtime 同步地应用更新。</li></ol><p>你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新</p><h3 id="在-compiler-中"><a href="#在-compiler-中" class="headerlink" title="在 compiler 中"></a>在 compiler 中</h3><p>除了普通资源，compiler 需要发出 “update”，将之前的版本更新到新的版本。”update” 由两部分组成：</p><ol><li>更新后的 manifest (JSON)</li><li>一个或多个 updated chunk (JavaScript)</li></ol><p>manifest 包括新的 compilation hash 和所有的 updated chunk 列表。每个 chunk 都包含着全部更新模块的最新代码（或一个 flag 用于表明此模块需要被移除）。</p><p>compiler 会确保在这些构建之间的模块 ID 和 chunk ID 保持一致。通常将这些 ID 存储在内存中（例如，使用 webpack-dev-server 时），但是也可能会将它们存储在一个 JSON 文件中。</p><h3 id="在模块中"><a href="#在模块中" class="headerlink" title="在模块中"></a>在模块中</h3><p>HMR 是可选功能，只会影响包含 HMR 代码的模块。举个例子，通过 style-loader 为 style 追加补丁。为了运行追加补丁，style-loader 实现了 HMR 接口；当它通过 HMR 接收到更新，它会使用新的样式替换旧的样式。</p><p>类似的，当在一个模块中实现了 HMR 接口，你可以描述出当模块被更新后发生了什么。然而在多数情况下，不需要在每个模块中强行写入 HMR 代码。如果一个模块没有 HMR 处理函数，更新就会冒泡(bubble up)。这意味着某个单独处理函数能够更新整个模块树。如果在模块树的一个单独模块被更新，那么整组依赖模块都会被重新加载。</p><h1 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1><p>基本配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"><span class="comment">//默认清理./dist</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="comment">//打包html，并引入bundle</span></span><br><span class="line"><span class="keyword">const</span> ManifestPlugin = <span class="built_in">require</span>(<span class="string">"webpack-manifest-plugin"</span>);</span><br><span class="line"><span class="comment">//可以将 manifest 数据提取为一个容易使用的 json 文件。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">"development"</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">"inline-source-map"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name].bundle.js"</span>,</span><br><span class="line">    chunkFilename: <span class="string">"[name].bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ManifestPlugin(),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">"haha"</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//提取公共代码</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">"all"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">//hmr</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="动态导入-dynamic-import"><a href="#动态导入-dynamic-import" class="headerlink" title="动态导入(dynamic import)"></a>动态导入(dynamic import)</h1><p>当涉及到动态代码拆分时，webpack 提供了两个类似的技术。第一种，也是推荐选择的方式是，使用符合 ECMAScript 提案 的 import() 语法 来实现动态导入。第二种，则是 webpack 的遗留功能，使用 webpack 特定的 require.ensure。让我们先尝试使用第一种……</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 会生成lodash.bundle.js，而不是0.bundle.js</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "lodash" */</span> <span class="string">"lodash"</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: _ &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">      element.innerHTML = _.join([<span class="string">"Hello"</span>, <span class="string">"webpack"</span>], <span class="string">" "</span>);</span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="string">"An error occurred while loading the component"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getComponent().then(<span class="function">(<span class="params">component</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(component);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="预获取-预加载模块-prefetch-preload-module"><a href="#预获取-预加载模块-prefetch-preload-module" class="headerlink" title="预获取/预加载模块(prefetch/preload module)"></a>预获取/预加载模块(prefetch/preload module)</h1><p>webpack v4.6.0+ 增加了对预获取和预加载的支持。</p><p>在声明 import 时，使用下面这些内置指令，可以让 webpack 输出 “resource hint(资源提示)”，来告知浏览器：</p><ul><li>prefetch(预获取)：将来某些导航下可能需要的资源</li><li>preload(预加载)：当前导航下可能需要资源</li></ul><p>下面这个 prefetch 的简单示例中，有一个 HomePage 组件，其内部渲染一个 LoginButton 组件，然后在点击后按需加载 LoginModal 组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">"LoginModal"</span>);</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPreload: true */</span> <span class="string">"ChartingLibrary"</span>);</span><br></pre></td></tr></table></figure><p>与 prefetch 指令相比，preload 指令有许多不同之处：</p><ul><li>preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。</li><li>preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。</li><li>preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。</li><li>浏览器支持程度不同。</li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">"[name].[contenthash].js"</span>,</span><br><span class="line">  chunkFilename: <span class="string">"[name].[contenthash].js"</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>build 后会生成类似： main.7e2c49a622975ebd9b7e.js，不修改文件再次运行会发现 contenthash 还是变化了，<br>这也是因为 webpack 在入口 chunk 中，包含了某些 boilerplate(引导模板)，特别是 runtime 和 manifest。（译注：boilerplate 指 webpack 运行时的引导代码）</p><p>提取引导模板(extracting boilerplate)<br>正如我们在 代码分离 中所学到的，SplitChunksPlugin 可以用于将模块分离到单独的 bundle 中。webpack 还提供了一个优化功能，可使用 optimization.runtimeChunk 选项将 runtime 代码拆分为一个单独的 chunk。将其设置为 single 来为所有 chunk 创建一个 runtime bundle：</p><p>模块标识符(module identifier)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">"lodash"</span>;</span><br><span class="line"><span class="keyword">import</span> Print <span class="keyword">from</span> <span class="string">"./print"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// lodash 是由当前 script 脚本 import 进来的</span></span><br><span class="line">  element.innerHTML = _.join([<span class="string">"Hello"</span>, <span class="string">"webpack"</span>], <span class="string">" "</span>);</span><br><span class="line">  element.onclick = Print.bind(<span class="literal">null</span>, <span class="string">"Hello webpack!"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>再次运行构建，然后我们期望的是，只有 main bundle 的 hash 发生变化，然而……</p><p>……我们可以看到这三个文件的 hash 都变化了。这是因为每个 module.id 会默认地基于解析顺序(resolve order)进行增量。也就是说，当解析顺序发生变化，ID 也会随之改变。因此，简要概括：</p><p>main bundle 会随着自身的新增内容的修改，而发生变化。<br>vendor bundle 会随着自身的 module.id 的变化，而发生变化。<br>manifest runtime 会因为现在包含一个新模块的引用，而发生变化。</p><p>第一个和最后一个都是符合预期的行为，vendor hash 发生变化是我们要修复的。我们将 optimization.moduleIds 设置为 ‘hashed’：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">     moduleIds: <span class="string">'hashed'</span>,</span><br><span class="line">      runtimeChunk: <span class="string">'single'</span>,</span><br><span class="line">      splitChunks: &#123;</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">          vendor: &#123;</span><br><span class="line">            test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">            name: <span class="string">'vendors'</span>,</span><br><span class="line">            chunks: <span class="string">'all'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> 打包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vuex实现原理介绍</title>
      <link href="/2020/07/23/vuex/"/>
      <url>/2020/07/23/vuex/</url>
      
        <content type="html"><![CDATA[<h3 id="vuex-简介"><a href="#vuex-简介" class="headerlink" title="vuex 简介"></a>vuex 简介</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>我们知道一个简单 vue 组件的状态管理包含以下几个部分：</p><ul><li>state，驱动应用的数据源；</li><li>view，以声明方式将 state 映射到视图；</li><li>actions，响应在 view 上的用户输入导致的状态变化。</li></ul><img src="/2020/07/23/vuex/flow.png" class title="This is an test image"><p>单当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：</p><ul><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。</li></ul><p>因此，Vuex 的思想就是把组件的共享状态抽取出来，以一个全局单例模式管理，在这种模式下，组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p><img src="/2020/07/23/vuex/3.png" class title="This is an test image"><p>先来看下，vuex 的引入方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#store.js</span></span><br><span class="line">import Vuex from <span class="string">'vuex'</span>;</span><br><span class="line">import Vue from <span class="string">'vue'</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">#最后在实例化vue中引入store.js</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).<span class="variable">$mount</span>(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><h3 id="我们手写一个简易版的-vuex"><a href="#我们手写一个简易版的-vuex" class="headerlink" title="我们手写一个简易版的 vuex"></a>我们手写一个简易版的 vuex</h3><p>首先看到 Vue.use(Vuex) 引入组件，按照 vue 官方引入插件标准，需要有一个 install 函数，加上需要实例化 Vuex.Store，可以知道，一个基本的 vuex 插件最少需要导出一个方法和一个类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vuex.js</span></span><br><span class="line"><span class="built_in">let</span> Vue;</span><br><span class="line"><span class="keyword">function</span> install(_Vue) &#123;</span><br><span class="line">  <span class="comment"># 这里可以扩展一些Vue的方法，定义全局方法，注册全局指令等</span></span><br><span class="line">  Vue = _Vue;</span><br><span class="line"></span><br><span class="line">  Vue.minxin(&#123;</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(this.<span class="variable">$options</span> &amp;&amp; this.<span class="variable">$options</span>.store) &#123;</span><br><span class="line">        this.<span class="variable">$store</span> = this.<span class="variable">$options</span>.store</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        this.<span class="variable">$store</span> = this.<span class="variable">$parent</span>.<span class="variable">$options</span>.store</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options=&#123;&#125;) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  install,</span><br><span class="line">  Store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们在页面里面可以通过 this.$store 去访问 vuex 里面的 state, 调用 dispatch 等，通过源码分析，我们知道 vuex 是以一种混入的方式，动态的向每个要加载的组件中设置一个$store 属性，store 默认设置在最外层，所以最外层组件加载最外层 store，第一个子组件则引用他父组件的$store，依次往下，这样每个组件访问的都是同一个全局 store。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  customAttr: <span class="string">"custom"</span>,</span><br><span class="line">  <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    console.log(this.<span class="variable">$store</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来以此讲解 store 中每个属性是怎么加载的和绑定的，看下都做了些什么<br>我们先定义一个 store.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#store.js, 引入上面定义的vuex.js</span></span><br><span class="line">import Vuex from <span class="string">"./vuex"</span>;</span><br><span class="line">import Vue from <span class="string">"vue"</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    food: <span class="string">"noodle"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># main.js中引入store</span></span><br><span class="line">import store from <span class="string">'./store</span></span><br><span class="line"><span class="string">new Vue(&#123;</span></span><br><span class="line"><span class="string">  store,</span></span><br><span class="line"><span class="string">  render: h =&gt; h(App),</span></span><br><span class="line"><span class="string">&#125;).$mount('</span><span class="comment">#app');</span></span><br></pre></td></tr></table></figure><blockquote><p>state</p></blockquote><p>我们知道在页面内可以通过如下去获取 state 中的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.state.food</span><br></pre></td></tr></table></figure><p>这个时候我们拿到的$store 是 vuex 里面 Store 的一个实例，所以要能访问 state，应该是内部定义一个属性引用的是 store.js 中定义的 state，所以我们在实例化 Store 传入参数的时候，可以设置下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options=&#123;&#125;) &#123;</span><br><span class="line"></span><br><span class="line">    this.state = options.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在页面中，就可以访问到了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(this.<span class="variable">$store</span>.state.food);</span><br><span class="line"><span class="comment"># 打印出noodle了</span></span><br></pre></td></tr></table></figure><img src="/2020/07/23/vuex/1.png" class><p>或者直接在页面使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;&#123;&#123;<span class="variable">$store</span>.state.food&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>不过当我们尝试去修改这个 state 页面是不会变化的，要想实现动态变化，我们需要对它进行劫持，正如 vue 中对 data 添加 getter 和 setter 一样，所以我们的 state 需要放到一个 data 里面，vuex 是在内部定义了一个新的 vue 实例，将 state 设置到其 data 上，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    this.state = new Vue(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        state: options.state,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过很明显，我们的访问也会有所变化，就变成了$store.state.state 了，显然是不对的，不过我们可以利用 class 的 hook 函数 getter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    this._state = new Vue(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        state: options.state,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get <span class="function"><span class="title">state</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this._state.state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能正常访问了，这个时候长修改下 state，页面就会发生变化了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;&#123;&#123;this.<span class="variable">$store</span>.state.food&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    console.log(this.<span class="variable">$store</span>.state);</span><br><span class="line"></span><br><span class="line">    setInterval(() =&gt; &#123;</span><br><span class="line">      this.<span class="variable">$store</span>.state.food =</span><br><span class="line">        <span class="string">"i like eating noodles，"</span> + new Date().toString();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>getters</p></blockquote><p>在 vue 中我们的访问 getters 是放在 computed 中，所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;&#123;&#123; food &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">food</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> this.<span class="variable">$store</span>.getters.food;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>vuex 中的原理是这样的，访问 computed 中的 food 方法，去获取 this.$store.getters.food，因此我们在 vuex 中需要定一个 getters，添加属性进行劫持，所以代码中应该这样写，遍历传入的 getters，定义一个内部的 getters，把传入的 getters 中的 key，设置到 store 内部 getters 上去，所以通过$store.getters.key 去获取的时候就会被拦截住，从而去调用户定义在 getters 中的方法。所以下面的例子也能正常工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    this._state = new Vue(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        state: options.state,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Object.keys(options.getters).forEach((key) =&gt; &#123;</span><br><span class="line">      Object.defineProperty(this.getters, key, &#123;</span><br><span class="line">        get: () =&gt; &#123;</span><br><span class="line">          <span class="built_in">return</span> options.getters[key](this.state);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  get <span class="function"><span class="title">state</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this._state.state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;&#123;&#123; food &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">food</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> this.<span class="variable">$store</span>.getters.food;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>mutations</p></blockquote><p>在 vue 中是通过$store.commit()去调用一个 mutations 的，所以在 store 中要定一个 commit 方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &#123;&#123; food &#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">"change"</span>&gt;<span class="built_in">test</span>&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">food</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> this.<span class="variable">$store</span>.getters.food;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">change</span></span>() &#123;</span><br><span class="line">      this.<span class="variable">$store</span>.commit(<span class="string">"changeFood"</span>, <span class="string">"rice"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改 vuex.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    this._state = new Vue(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        state: options.state,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Object.keys(options.getters).forEach((key) =&gt; &#123;</span><br><span class="line">      Object.defineProperty(this.getters, key, &#123;</span><br><span class="line">        get: () =&gt; &#123;</span><br><span class="line">          <span class="built_in">return</span> options.getters[key](this.state);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> mutations = options.mutations;</span><br><span class="line">    this.commit = (name, payload) =&gt; &#123;</span><br><span class="line">      mutations[name](this.state, payload);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get <span class="function"><span class="title">state</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this._state.state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#store.js</span></span><br><span class="line">import Vuex from <span class="string">"./vuex"</span>;</span><br><span class="line">import Vue from <span class="string">"vue"</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    food: <span class="string">"noodles"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeFood(state, params) &#123;</span><br><span class="line">      state.food = params;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    food: (state) =&gt; state.food,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就是实现了点击 button 调用 mutations 来更改 state</p><blockquote><p>actions</p></blockquote><p>actions 的实现和 mutations 类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    this._state = new Vue(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        state: options.state,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    this.getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Object.keys(options.getters).forEach((key) =&gt; &#123;</span><br><span class="line">      Object.defineProperty(this.getters, key, &#123;</span><br><span class="line">        get: () =&gt; &#123;</span><br><span class="line">          <span class="built_in">return</span> options.getters[key](this.state);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> mutations = options.mutations;</span><br><span class="line">    this.commit = (name, payload) =&gt; &#123;</span><br><span class="line">      mutations[name](this.state, payload);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> actions = options.actions;</span><br><span class="line">    this.dispatch = (name, payload) =&gt; &#123;</span><br><span class="line">      actions[name](this, this.state, payload);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get <span class="function"><span class="title">state</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this._state.state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#store.js</span></span><br><span class="line">import Vuex from <span class="string">"./vuex"</span>;</span><br><span class="line">import Vue from <span class="string">"vue"</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    food: <span class="string">"noodles"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    changeFood(state, params) &#123;</span><br><span class="line">      state.food = params;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    changeFood(&#123; commit &#125;) &#123;</span><br><span class="line">      commit(<span class="string">"changeFood"</span>, <span class="string">"change food from actions"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    food: (state) =&gt; state.food,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">#app.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &#123;&#123; food &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=<span class="string">"change"</span>&gt;<span class="built_in">test</span>&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">"App"</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">food</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> this.<span class="variable">$store</span>.getters.food;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">change</span></span>() &#123;</span><br><span class="line">      // this.<span class="variable">$store</span>.commit(<span class="string">"changeFood"</span>, <span class="string">"rice"</span>);</span><br><span class="line">      this.<span class="variable">$store</span>.dispatch(<span class="string">"changeFood"</span>, <span class="string">"rice2"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样就实现了点击按钮，dispatch 一个 action，调用用户定义的 action，传入当前 store，运行用户代码，执行 store 里面定义的 commit 方法，来执行相应的 mutations，最后更新 state</p><img src="/2020/07/23/vuex/2.png" class><p>这就是一个简易版的 vuex 实现方式啦，当然真实的 vuex 实现要考虑更多的情形，包括 modules，namespaces 等等，不过实现思路还是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> vuex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mocha + Chai.js + Istanbul 测试介绍</title>
      <link href="/2020/07/23/tests/"/>
      <url>/2020/07/23/tests/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>测试的重要性不要说大家都知道，而且测试对于查找错误、验证功能和提高软件的总体稳定性非常重要。几乎所有(如果不是全部的话)开发人员都以某种方式测试他们的代码。测试的一种方法是手动运行程序并测试所有函数，以查看是否一切都按预期工作。另一种(也是更好的)方法是编写每次代码更改时都运行的自动化测试。</p><p>废话不多，开始吧。</p><p>首先创建一个新项目。 创建一个空目录并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">npm install --save-dev mocha chai</span><br></pre></td></tr></table></figure><p>新建一个 math.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const math = &#123;&#125;;</span><br><span class="line">math.add = (num1, num2) =&gt; num1 + num2;</span><br><span class="line">math.multiply = (num1, num2) =&gt; num1 * num2;</span><br><span class="line">math.isPositive = (num) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(num &gt; 0) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">module.exports = math;</span><br></pre></td></tr></table></figure><p>新建一个目录 test，在 test 下面新建一个 math.test.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const expect = require(<span class="string">"chai"</span>).expect;</span><br><span class="line">const math = require(<span class="string">"../math"</span>);</span><br><span class="line">describe(<span class="string">"math.js tests"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  describe(<span class="string">"math.add() Test"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    it(<span class="string">"should equal 2"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      const result = math.add(1, 1);</span><br><span class="line">      expect(result).to.equal(2);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should equal 4"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      const result = math.add(2, 2);</span><br><span class="line">      expect(result).to.equal(4);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">"math.multiply() Test"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    it(<span class="string">"should equal 3"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      const result = math.multiply(3, 1);</span><br><span class="line">      expect(result).to.equal(3);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"should equal 10"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      const result = math.multiply(5, 2);</span><br><span class="line">      expect(result).to.equal(10);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">"math.isPositve() Test"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    it(<span class="string">"should be positive"</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      const result = math.isPositive(3);</span><br><span class="line">      expect(result).to.equal(<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后修改 package.json，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"mocha"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这时候我们运行 npm test，输出如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; mocha</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  math.js tests</span><br><span class="line">    math.add() Test</span><br><span class="line">      ✓ should equal 2</span><br><span class="line">      ✓ should equal 4</span><br><span class="line">    math.multiply() Test</span><br><span class="line">      ✓ should equal 3</span><br><span class="line">      ✓ should equal 10</span><br><span class="line"></span><br><span class="line">  4 passing (6ms)</span><br></pre></td></tr></table></figure><p>如果要生成测试覆盖率，需要安装 Istanbul，不过也可以使用 Istanbul 提供的一个 cli 工具 nyc，使用更加方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm i -save-dev nyc</span><br></pre></td></tr></table></figure><p>修改 package.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"mocha"</span>,</span><br><span class="line">    <span class="string">"coverage"</span>: <span class="string">"nyc npm run test"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>运行 npm run coverage，输出如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> math.js tests</span><br><span class="line">    math.add() Test</span><br><span class="line">      ✓ should equal 2</span><br><span class="line">      ✓ should equal 4</span><br><span class="line">    math.multiply() Test</span><br><span class="line">      ✓ should equal 3</span><br><span class="line">      ✓ should equal 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  4 passing (14ms)</span><br><span class="line"></span><br><span class="line">----------|---------|----------|---------|---------|-------------------</span><br><span class="line">File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line <span class="comment">#s</span></span><br><span class="line">----------|---------|----------|---------|---------|-------------------</span><br><span class="line">All files |      90 |       50 |     100 |    87.5 |</span><br><span class="line"> math.js  |      90 |       50 |     100 |    87.5 | 11</span><br><span class="line">----------|---------|----------|---------|---------|-------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web安全相关介绍</title>
      <link href="/2020/07/23/security/"/>
      <url>/2020/07/23/security/</url>
      
        <content type="html"><![CDATA[<h3 id="XSS-攻击漏洞"><a href="#XSS-攻击漏洞" class="headerlink" title="XSS 攻击漏洞"></a>XSS 攻击漏洞</h3><p>XSS Prevention Rules</p><ul><li><p>RULE #0 - Never Insert Untrusted Data Except in Allowed Locations</p></li><li><p>RULE #1 - HTML Encode Before Inserting Untrusted Data into HTML Element Content</p></li><li><p>RULE #2 - Attribute Encode Before Inserting Untrusted Data into HTML Common Attributes</p></li><li><p>RULE #3 - JavaScript Encode Before Inserting Untrusted Data into JavaScript Data Values</p><ul><li><p>RULE #3.1 - HTML Encode JSON values in an HTML context and read the data with JSON.parse<br>Ensure returned Content-Type header is application/json and not text/html。eg：</p><p>Bad response<br>HTTP/1.1 200<br>Date: Wed, 06 Feb 2013 10:28:54 GMT<br>Server: Microsoft-IIS/7.5….<br>Content-Type: text/html; charset=utf-8 &lt;– bad<br>….<br>Content-Length: 373<br>Keep-Alive: timeout=5, max=100<br>Connection: Keep-Alive<br>{“Message”:”No HTTP resource was found that matches the request URI ‘dev.net.ie/api/pay/.html?HouseNumber=9&amp;AddressLine<br>=The+Gardens<script><code>alert(1)</code></script>&amp;AddressLine2=foxlodge+woods&amp;TownName=Meath’.”,”MessageDetail”:”No type was found<br>that matches the controller named ‘pay’.”} &lt;– this script will pop!</p><p>Good HTTP response:<br>HTTP/1.1 200<br>Date: Wed, 06 Feb 2013 10:28:54 GMT<br>Server: Microsoft-IIS/7.5….<br>Content-Type: application/json; charset=utf-8 &lt;–good<br>…..</p><p>// Do not</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// Do NOT do this without encoding the data with one of the techniques listed below.</span></span><br><span class="line"><span class="keyword">var</span> initData = &lt;%= data.to_json %&gt;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>//good</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"init_data"</span> style=<span class="string">"display: none"</span>&gt;</span><br><span class="line">&lt;%= html_encode(data.to_json) %&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>RULE #4 - CSS Encode And Strictly Validate Before Inserting Untrusted Data into HTML Style Property Values<br>css can also have xss,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; background-url : <span class="string">"javascript:alert(1)"</span>; &#125; <span class="comment">// and all other URLs</span></span><br><span class="line">&#123; text-size: <span class="string">"expression(alert('XSS'))"</span>; &#125; <span class="comment">// only in IE</span></span><br></pre></td></tr></table></figure></li><li><p>RULE #5 - URL Encode Before Inserting Untrusted Data into HTML URL Parameter Values<br>// do this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">String</span> userURL = request.getParameter( <span class="string">"userURL"</span> )</span><br><span class="line">boolean isValidURL = Validator.IsValidURL(userURL, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">if</span> (isValidURL) &#123;</span><br><span class="line">&lt;a href=<span class="string">"&lt;%=encoder.encodeForHTMLAttribute(userURL)%&gt;"</span>&gt;link&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>RULE #6 - Sanitize HTML Markup with a Library Designed for the Job<br>If your application handles markup – untrusted input that is supposed to contain HTML.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- HtmlSanitizer:</span><br><span class="line">  <span class="keyword">var</span> sanitizer = <span class="keyword">new</span> HtmlSanitizer();</span><br><span class="line">  sanitizer.AllowedAttributes.Add(<span class="string">"class"</span>);</span><br><span class="line">  <span class="keyword">var</span> sanitized = sanitizer.Sanitize(html);</span><br><span class="line">- Other Sanitize</span><br></pre></td></tr></table></figure></li><li><p>RULE #7 - Avoid JavaScript URLs</p></li><li><p>RULE #8 - Prevent DOM-based XSS</p></li></ul><p>And</p><ul><li><p>Bonus Rule #1: Use HTTPOnly cookie flag</p></li><li><p>Bonus Rule #2: Implement Content Security Policy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Content-Security-Policy: default-src: <span class="string">'self'</span>; script-src: <span class="string">'self'</span> static.domain.tld</span><br></pre></td></tr></table></figure></li><li><p>Bonus Rule #3: Use an Auto-Escaping Template System</p></li><li><p>Bonus Rule #4: Properly use modern JS frameworks</p><table><thead><tr><th>JavaScript framework</th><th align="center">Dangerous methods / props</th></tr></thead><tbody><tr><td>Angular (2+)</td><td align="center">bypassSecurityTrust</td></tr><tr><td>React</td><td align="center">dangerouslySetInnerHTML</td></tr><tr><td>Vue (2+)</td><td align="center">v-html</td></tr></tbody></table></li></ul><h3 id="XSS-Prevention-Rules-Summary"><a href="#XSS-Prevention-Rules-Summary" class="headerlink" title="XSS Prevention Rules Summary"></a>XSS Prevention Rules Summary</h3><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#XSS_Prevention_Rules" target="_blank" rel="noopener">参考</a></p><table><thead><tr><th>Data Type</th><th>Context</th><th>Code Sample</th><th>Defense</th></tr></thead><tbody><tr><td>String</td><td>HTML Body</td><td><code>&lt;span&gt;UNTRUSTED DATA &lt;/span&gt;</code></td><td>HTML Entity Encoding (rule #1).</td></tr><tr><td>String</td><td>Safe HTML Attributes</td><td><code>&lt;input type="text" name="fname" value="UNTRUSTED DATA "&gt;</code></td><td>Aggressive HTML Entity Encoding (rule #2), Only place untrusted data into a whitelist of safe attributes (listed below), Strictly validate unsafe attributes such as background, ID and name.</td></tr><tr><td>String</td><td>GET Parameter</td><td><code>&lt;a href="/site/search?value=UNTRUSTED DATA "&gt;clickme&lt;/a&gt;</code></td><td>URL Encoding (rule #5).</td></tr><tr><td>String</td><td>Untrusted URL in a SRC or HREF attribute</td><td><code>&lt;a href="UNTRUSTED URL "&gt;clickme&lt;/a&gt; &lt;iframe src="UNTRUSTED URL " /&gt;</code></td><td>Canonicalize input, URL Validation, Safe URL verification, Whitelist http and HTTPS URLs only (Avoid the JavaScript Protocol to Open a new Window), Attribute encoder.</td></tr><tr><td>String</td><td>CSS Value</td><td><code>html &lt;div style="width: UNTRUSTED DATA ;"&gt;Selection&lt;/div&gt;</code></td><td>Strict structural validation (rule #4), CSS Hex encoding, Good design of CSS Features.</td></tr><tr><td>String</td><td>JavaScript Variable</td><td><code>&lt;script&gt;var currentValue='UNTRUSTED DATA ';&lt;/script&gt; &lt;script&gt;someFunction('UNTRUSTED DATA ');&lt;/script&gt;</code></td><td>Ensure JavaScript variables are quoted, JavaScript Hex Encoding, JavaScript Unicode Encoding, Avoid backslash encoding (<code>\"</code> or <code>\'</code> or <code>\\</code>).</td></tr><tr><td>HTML</td><td>HTML Body</td><td><code>&lt;div&gt;UNTRUSTED HTML&lt;/div&gt;</code></td><td>HTML Validation (JSoup, AntiSamy, HTML Sanitizer...).</td></tr><tr><td>String</td><td>DOM XSS</td><td><code>&lt;script&gt;document.write("UNTRUSTED INPUT: " + document.location.hash );&lt;script/&gt;</code></td><td><a href="DOM_based_XSS_Prevention_Cheat_Sheet.html">DOM based XSS Prevention Cheat Sheet</a></td></tr></tbody></table><p>Safe HTML Attributes include: align, alink, alt, bgcolor, border, cellpadding, cellspacing, class, color, cols, colspan, coords, dir, face, height, hspace, ismap, lang, marginheight, marginwidth, multiple, nohref, noresize, noshade, nowrap, ref, rel, rev, rows, rowspan, scrolling, shape, span, summary, tabindex, title, usemap, valign, value, vlink, vspace, width.</p><h3 id="Output-Encoding-Rules-Summary"><a href="#Output-Encoding-Rules-Summary" class="headerlink" title="Output Encoding Rules Summary"></a>Output Encoding Rules Summary</h3><table><thead><tr><th>Encoding Type</th><th>Encoding Mechanism</th></tr></thead><tbody><tr><td>HTML Entity Encoding</td><td>Convert <code>&amp;</code> to <code>&amp;amp;</code>, Convert <code>&lt;</code> to <code>&amp;lt;</code>, Convert <code>&gt;</code> to <code>&amp;gt;</code>, Convert <code>"</code> to <code>&amp;quot;</code>, Convert <code>'</code> to <code>&amp;#x27;</code>, Convert <code>/</code> to <code>&amp;#x2F;</code></td></tr><tr><td>HTML Attribute Encoding</td><td>Except for alphanumeric characters, encode all characters with the HTML Entity <code>&amp;#xHH;</code> format, including spaces. (<strong>HH</strong> = Hex Value)</td></tr><tr><td>URL Encoding</td><td>Standard percent encoding, see <a href="https://www.w3schools.com/tags/ref_urlencode.asp" target="_blank" rel="noopener">here</a>. URL encoding should only be used to encode parameter values, not the entire URL or path fragments of a URL.</td></tr><tr><td>JavaScript Encoding</td><td>Except for alphanumeric characters, encode all characters with the <code>\uXXXX</code> unicode encoding format (<strong>X</strong> = Integer).</td></tr><tr><td>CSS Hex Encoding</td><td>CSS encoding supports <code>\XX</code> and <code>\XXXXXX</code>. Using a two character encode can cause problems if the next character continues the encode sequence. There are two solutions (a) Add a space after the CSS encode (will be ignored by the CSS parser) (b) use the full amount of CSS encoding possible by zero padding the value.</td></tr></tbody></table><h3 id="文件上传下载漏洞"><a href="#文件上传下载漏洞" class="headerlink" title="文件上传下载漏洞"></a>文件上传下载漏洞</h3><h3 id="敏感信息泄露漏洞"><a href="#敏感信息泄露漏洞" class="headerlink" title="敏感信息泄露漏洞"></a>敏感信息泄露漏洞</h3><h3 id="CSRF-漏洞"><a href="#CSRF-漏洞" class="headerlink" title="CSRF 漏洞"></a>CSRF 漏洞</h3><h3 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h3><h3 id="水平越权测试"><a href="#水平越权测试" class="headerlink" title="水平越权测试"></a>水平越权测试</h3><h3 id="垂直越权测试"><a href="#垂直越权测试" class="headerlink" title="垂直越权测试"></a>垂直越权测试</h3><p>###</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react学习之旅1</title>
      <link href="/2020/07/23/react/"/>
      <url>/2020/07/23/react/</url>
      
        <content type="html"><![CDATA[<p>工作中 Vue 用了很久了，react 以前也用过，但是都是用来开发一些组件或者小项目用过，对 react 的技术还是有点模糊，现在从头看一遍并记录下来。</p><h3 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h3><p>下面这段语法是一段 JSX 语法，它既不是字符串也不是 HTML。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const element &#x3D; &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;;&lt;&#x2F;code&gt;</span><br></pre></td></tr></table></figure><p>它被称为 JSX，是一个 JavaScript 的语法扩展。我们建议在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。</p><blockquote><p>为什么使用 JSX？</p></blockquote><p>React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合，比如，在 UI 中需要绑定处理事件、在某些时刻状态发生变化时需要通知到 UI，以及需要在 UI 中展示准备好的数据。<br>React 并没有采用将标记与逻辑进行分离到不同文件这种人为地分离方式，而是通过将二者共同存放在称之为“组件”的松散耦合单元之中，来实现关注点分离。<br>React 不强制要求使用 JSX，但是大多数人发现，在 JavaScript 代码中将 JSX 和 UI 放在一起时，会在视觉上有辅助作用。它还可以使 React 显示更多有用的错误和警告消息。</p><p>jsx 语法中使用单括号来计算表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"Josh Perez"</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.firstName + <span class="string">" "</span> + user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">"Harper"</span>,</span><br><span class="line">  lastName: <span class="string">"Perez"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p>因为 JSX 语法上更接近 JavaScript 而不是 HTML，所以 React DOM 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。<br>例如，JSX 里的 class 变成了 className，而 tabindex 则变为 tabIndex。</p><blockquote><p>JSX 防止注入攻击</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = response.potentiallyMaliciousInput;</span><br><span class="line"><span class="comment">// 直接使用是安全的：</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>默认会对要显示的内容进行转义，一般转义的符号包括如下，这回很好的防止 XSS 攻击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp; --&gt; &amp;amp;</span><br><span class="line">&lt; --&gt; &amp;lt;</span><br><span class="line">&gt; --&gt; &amp;gt;</span><br><span class="line"><span class="string">" --&gt; &amp;quot;</span></span><br><span class="line"><span class="string">' --&gt; &amp;#x27;</span></span><br><span class="line"><span class="string">/ --&gt; &amp;#x2F;</span></span><br></pre></td></tr></table></figure><blockquote><p>JSX 表示对象</p></blockquote><p>Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"greeting"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="comment">// 两者一致</span></span><br><span class="line"><span class="keyword">const</span> element = React.createElement(</span><br><span class="line">  <span class="string">"h1"</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">"greeting"</span> &#125;,</span><br><span class="line">  <span class="string">"Hello, world!"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>React.createElement() 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：这是简化过的结构</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  type: <span class="string">"h1"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: <span class="string">"greeting"</span>,</span><br><span class="line">    children: <span class="string">"Hello, world!"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h3><p>元素是构成 React 应用的最小砖块。<br>与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象。React DOM 会负责更新 DOM 来与 React 元素保持一致。</p><blockquote><p>将一个元素渲染为 DOM</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"root"</span>&gt;&lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const element = &lt;h1&gt;Hello, world&lt;/</span>h1&gt;;</span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><h3 id="组件-amp-Props"><a href="#组件-amp-Props" class="headerlink" title="组件 &amp; Props"></a>组件 &amp; Props</h3><p>这个概练和 vue 一样，将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。本指南旨在介绍组件的相关理念</p><blockquote><p>函数组件与 class 组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>渲染组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span></span>;</span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p>注意： 组件名称必须以大写字母开头。<br>React 会将以小写字母开头的组件视为原生 DOM 标签。例如，<div> 代表 HTML 的 div 标签，而 <Welcome> 则代表一个组件，并且需在作用域内使用 Welcome。</Welcome></div></p><blockquote><p>组合组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Cahal"</span> /&gt;</span><br><span class="line">      &lt;Welcome name=<span class="string">"Edite"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>提取组件</p></blockquote><p>该组件接受的 Props 包含了，author（对象），text （字符串）以及 date（日期）作为 props</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"Comment"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"UserInfo"</span>&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          className=<span class="string">"Avatar"</span></span><br><span class="line">          src=&#123;props.author.avatarUrl&#125;</span><br><span class="line">          alt=&#123;props.author.name&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;div className=<span class="string">"UserInfo-name"</span>&gt;&#123;props.author.name&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div className=<span class="string">"Comment-text"</span>&gt;&#123;props.text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="Comment-date"&gt;&#123;formatDate(props.date)&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>可以提取成如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avatar</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;img className=<span class="string">"Avatar"</span> src=&#123;props.user.avatarUrl&#125; alt=&#123;props.user.name&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserInfo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"UserInfo"</span>&gt;</span><br><span class="line">      &lt;Avatar user=&#123;props.user&#125; /&gt;</span><br><span class="line">      &lt;div className=<span class="string">"UserInfo-name"</span>&gt;&#123;props.user.name&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后comment简化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"Comment"</span>&gt;</span><br><span class="line">      &lt;UserInfo user=&#123;props.author&#125; /&gt;</span><br><span class="line">      &lt;div className=<span class="string">"Comment-text"</span>&gt;&#123;props.text&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="Comment-date"&gt;&#123;formatDate(props.date)&#125;&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>Props 的只读性</p></blockquote><p>组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props。来看下这个 sum 函数：</p><h3 id="State-amp-生命周期"><a href="#State-amp-生命周期" class="headerlink" title="State &amp; 生命周期"></a>State &amp; 生命周期</h3><p>实现 UI 更新就需要用到 state, State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;It is &#123;this.state.date.toLocaleTimeString()&#125;.&lt;/</span>h2&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Clock /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>将函数组件转换成 class 组件</p></blockquote><p>通过以下五步将 Clock 的函数组件转成 class 组件：</p><ul><li>创建一个同名的 ES6 class，并且继承于 React.Component。</li><li>添加一个空的 render() 方法。</li><li>将函数体移动到 render() 方法之中。</li><li>在 render() 方法中使用 this.props 替换 props。</li><li>删除剩余的空函数声明。</li></ul><blockquote><p>正确地使用 State<br>关于 setState() 你应该了解三件事：</p></blockquote><ul><li>不要直接修改 State</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">comment</span>: <span class="string">"Hello"</span> &#125;);</span><br></pre></td></tr></table></figure><p>构造函数是唯一可以给 this.state 赋值的地方：</p><blockquote><p>State 的更新可能是异步的</p></blockquote><p>出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。<br>因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>要解决这个问题，可以让 setState() 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: state.counter + props.increment,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><blockquote><p>State 的更新会被合并</p></blockquote><p>当你调用 setState() 的时候，React 会把你提供的对象合并到当前的 state。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      posts: [],</span><br><span class="line">      comments: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后你可以分别调用 setState() 来单独地更新它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  fetchPosts().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      posts: response.posts</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fetchComments().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      comments: response.comments</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的合并是浅合并，所以 this.setState({comments}) 完整保留了 this.state.posts， 但是完全替换了 this.state.comments。</p><blockquote><p>数据是向下单项流动的</p></blockquote><p>不管是父组件或是子组件都无法知道某个组件是有状态的还是无状态的，并且它们也并不关心它是函数组件还是 class 组件。<br>这就是为什么称 state 为局部的或是封装的的原因。除了拥有并设置了它的组件，其他组件都无法访问。<br>组件可以选择把它的 state 作为 props 向下传递到它的子组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormattedDate date=&#123;<span class="keyword">this</span>.state.date&#125; /&gt;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FormattedDate</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;props.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;Activate Lasers&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ html中</span></span><br><span class="line"><span class="regexp">&lt;button onclick="activateLasers()"&gt;</span></span><br><span class="line"><span class="regexp">  Activate Lasers</span></span><br><span class="line"><span class="regexp">&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><p>在 React 中另一个不同点是你不能通过返回 false 的方式阻止默认行为。你必须显式的使用 preventDefault 。例如，传统的 HTML 中阻止链接默认打开一个新页面，你可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"#"</span> onclick=<span class="string">"console.log('The link was clicked.'); return false"</span>&gt;</span><br><span class="line">  Click me</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>在 react 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The link was clicked."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在这里，e 是一个合成事件。React 根据 W3C 规范来定义这些合成事件，所以你不需要担心跨浏览器的兼容性问题。</p><p>处理捕获阶段的点击事件请使用 onClickCapture，而不是 onClick</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class="line">  <span class="comment">// 注意: 这是 *实验性* 语法。</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：此语法问题在于每次渲染 LoggingButton 时都会创建不同的回调函数。在大多数情况下，这没什么问题，但如果该回调函数作为 prop 传入子组件时，这些组件可能会进行额外的重新渲染。我们通常建议在构造器中绑定或使用 class fields 语法来避免这类性能问题</span></span><br></pre></td></tr></table></figure><blockquote><p>向事件处理程序传递参数<br>在循环中，通常我们会为事件处理函数传递额外的参数。例如，若 id 是你要删除那一行的 ID，以下两种方式都可以向事件处理函数传递参数：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">// Try changing to isLoggedIn=&#123;true&#125;:</span></span><br><span class="line">  &lt;Greeting isLoggedIn=&#123;<span class="literal">false</span>&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>元素变量<br>你可以使用变量来储存元素。 它可以帮助你有条件地渲染组件的一部分，而其他的渲染部分并不会因此而改变。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginButton</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LogoutButton</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleLoginClick = <span class="keyword">this</span>.handleLoginClick.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleLogoutClick = <span class="keyword">this</span>.handleLogoutClick.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">isLoggedIn</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleLoginClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">isLoggedIn</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleLogoutClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">isLoggedIn</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line">    <span class="keyword">let</span> button;</span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">      button = <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      button = <span class="xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class="line">        &#123;button&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;LoginControl /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>与运算符 &amp;&amp;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mailbox</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> unreadMessages = props.unreadMessages;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &#123;unreadMessages.length &gt; 0 &amp;&amp; (</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;You have &#123;unreadMessages.length&#125; unread messages.&lt;/</span>h2&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const messages = ["React", "Re: React", "Re:Re: React"];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Mailbox unreadMessages=&#123;messages&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>三目运算符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      The user is &lt;b&gt;&#123;isLoggedIn ? <span class="string">'currently'</span> : <span class="string">'not'</span>&#125;&lt;<span class="regexp">/b&gt; logged in.</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;isLoggedIn</span><br><span class="line">        ? <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span></span></span><br><span class="line">        : <span class="xml"><span class="tag">&lt;<span class="name">LoginButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLoginClick&#125;</span> /&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>阻止组件渲染</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.warn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"warning"</span>&gt;</span>Warning!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">showWarning</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleToggleClick = <span class="keyword">this</span>.handleToggleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleToggleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      showWarning: !state.showWarning,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;WarningBanner warn=&#123;<span class="keyword">this</span>.state.showWarning&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleToggleClick&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.showWarning ? <span class="string">"Hide"</span> : <span class="string">"Show"</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Page</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p>在组件的 render 方法中返回 null 并不会影响组件的生命周期。例如，上面这个示例中，componentDidUpdate 依然会被调用。</p><h3 id="列表-amp-Key"><a href="#列表-amp-Key" class="headerlink" title="列表 &amp; Key"></a>列表 &amp; Key</h3><blockquote><p>渲染多个组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>基础列表组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> (</span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  ));</span></span><br><span class="line"><span class="regexp">  return &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识</p><p>key 会传递信息给 React ，但不会传递给你的组件。如果你的组件中需要使用 key 属性的值，请用其他属性名显式传递这个值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content = posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span> (</span><br><span class="line">  &lt;Post key=&#123;post.id&#125; id=&#123;post.id&#125; title=&#123;post.title&#125; /&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><blockquote><p>受控组件<br>输入的值始终由 React 的 state 驱动。你也可以将 value 传递给其他 UI 元素，或者通过其他事件处理函数重置，但这意味着你需要编写更多的代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">value</span>: <span class="string">""</span>, <span class="attr">type</span>: <span class="string">""</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">value</span>: event.target.value &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(<span class="string">"提交的名字: "</span> + <span class="keyword">this</span>.state.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">type</span>: event.target.value &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          名字:</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">"text"</span></span><br><span class="line">            value=&#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">            onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;select value=&#123;this.state.type&#125; onChange=&#123;this.handleChange&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &lt;option value="grapefruit"&gt;葡萄柚&lt;/</span>option&gt;</span><br><span class="line">          &lt;option value=<span class="string">"lime"</span>&gt;酸橙&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">          &lt;option value="coconut"&gt;椰子&lt;/</span>option&gt;</span><br><span class="line">          &lt;option value=<span class="string">"mango"</span>&gt;芒果&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>select&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h3><p>多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去</p><h3 id="React-哲学"><a href="#React-哲学" class="headerlink" title="React 哲学"></a>React 哲学</h3><p>假设我们已经有了一个返回 JSON 的 API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    category: <span class="string">"Sporting Goods"</span>,</span><br><span class="line">    price: <span class="string">"$49.99"</span>,</span><br><span class="line">    stocked: <span class="literal">true</span>,</span><br><span class="line">    name: <span class="string">"Football"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    category: <span class="string">"Sporting Goods"</span>,</span><br><span class="line">    price: <span class="string">"$9.99"</span>,</span><br><span class="line">    stocked: <span class="literal">true</span>,</span><br><span class="line">    name: <span class="string">"Baseball"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    category: <span class="string">"Sporting Goods"</span>,</span><br><span class="line">    price: <span class="string">"$29.99"</span>,</span><br><span class="line">    stocked: <span class="literal">false</span>,</span><br><span class="line">    name: <span class="string">"Basketball"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    category: <span class="string">"Electronics"</span>,</span><br><span class="line">    price: <span class="string">"$99.99"</span>,</span><br><span class="line">    stocked: <span class="literal">true</span>,</span><br><span class="line">    name: <span class="string">"iPod Touch"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    category: <span class="string">"Electronics"</span>,</span><br><span class="line">    price: <span class="string">"$399.99"</span>,</span><br><span class="line">    stocked: <span class="literal">false</span>,</span><br><span class="line">    name: <span class="string">"iPhone 5"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">category</span>: <span class="string">"Electronics"</span>, <span class="attr">price</span>: <span class="string">"$199.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"Nexus 7"</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>第一步：将设计好的 UI 划分为组件层级:</li></ul><img src="/2020/07/23/react/1.png" class><ul><li><p>第二步：用 React 创建一个静态版本</p></li><li><p>第三步：确定 UI state 的最小（且完整）表示</p></li><li><p>第四步：确定 state 放置的位置</p></li><li><p>第五步：添加反向数据流</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/2020/07/23/js/"/>
      <url>/2020/07/23/js/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>eslint</title>
      <link href="/2020/07/23/eslint/"/>
      <url>/2020/07/23/eslint/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eslint.bootcss.com/docs/user-guide/configuring" target="_blank" rel="noopener">入门指南</a></p><p>eslint 引入主要是为了 统一代码风格，预先检查错误。<br>一些常用属性介绍：</p><p>extends 配置预先设置的规则，</p><p>rules 自定义引入规，例如： “no-console”:’off’， 一般有三个参数选择 off、warn 和 error。<br>‘indent’: [ ‘error’, 2 ]<br>‘quotes’: [ ‘error’, ‘single’ ],</p><p>overrides</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="string">"extends"</span>: [<span class="string">"eslint:recommended"</span>], <span class="comment"># airbnb, all</span></span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    // <span class="built_in">enable</span> additional rules</span><br><span class="line">    <span class="string">"indent"</span>: [<span class="string">"error"</span>, 4],</span><br><span class="line">    <span class="string">"linebreak-style"</span>: [<span class="string">"error"</span>, <span class="string">"unix"</span>],</span><br><span class="line">    <span class="string">"quotes"</span>: [<span class="string">"error"</span>, <span class="string">"double"</span>],</span><br><span class="line">    <span class="string">"semi"</span>: [<span class="string">"error"</span>, <span class="string">"always"</span>],</span><br><span class="line"></span><br><span class="line">    // override default options <span class="keyword">for</span> rules from base configurations</span><br><span class="line">    <span class="string">"comma-dangle"</span>: [<span class="string">"error"</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="string">"no-cond-assign"</span>: [<span class="string">"error"</span>, <span class="string">"always"</span>],</span><br><span class="line"></span><br><span class="line">    // <span class="built_in">disable</span> rules from base configurations</span><br><span class="line">    <span class="string">"no-console"</span>: <span class="string">"off"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"overrides"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"files"</span>: [<span class="string">"*.md"</span>],</span><br><span class="line">        <span class="string">"processor"</span>: <span class="string">"a-plugin/markdown"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"files"</span>: [<span class="string">"**/*.md/*.js"</span>],</span><br><span class="line">        <span class="string">"rules"</span>: &#123;</span><br><span class="line">            <span class="string">"strict"</span>: <span class="string">"off"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> eslint </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>强制缓存和协商缓存</title>
      <link href="/2020/07/23/cache/"/>
      <url>/2020/07/23/cache/</url>
      
        <content type="html"><![CDATA[<blockquote><p>强制缓存</p></blockquote><p>浏览器在请求某一资源时，会先获取该资源缓存的 header 信息，判断是否命中强缓存（cache-control 和 expires 信息），若命中直接从缓存中获取资源信息。cache-constrol 比 expires 优先级更高，且 expires 是 http1.0 的</p><h5 id="cache-control-参数说明"><a href="#cache-control-参数说明" class="headerlink" title="cache-control 参数说明"></a>cache-control 参数说明</h5><p>现在主要使用 cache-control:<br>public : 终端用户和中间代理商等<br>private: 只允许终端用户<br>no-store: 不使用强制缓存或协商缓存<br>no-cache: 使用协商缓存，不使用强制缓存<br>max-age: 不大于多少时间内，都走强制缓存</p><blockquote><p>协商缓存</p></blockquote><p>如果没有命中强缓存，浏览器会发送请求到服务器，请求会携带第一次返回的有关缓存的 header 字段信息（Last-Modifued/If-Modified-Since 和 Etag/If-None-Match），它们是成对出现。<br>然后由服务器根据 header 信息来比对结果是否协商缓存命中。若命中，则服务器返回新的响应 header 信息更新缓存中的对应 header 信息，<br>但是不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容。</p><p>last-modified/if-modified-since,（通过时间比对）<br>etag/if-non-match（服务器对资源有一套 hash 算法）</p><p>且 etag 优先级比 last-modified 高</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>browser</title>
      <link href="/2020/07/23/browser/"/>
      <url>/2020/07/23/browser/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>babel入门到精通</title>
      <link href="/2020/07/23/babel/"/>
      <url>/2020/07/23/babel/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-Babel"><a href="#什么是-Babel" class="headerlink" title="什么是 Babel"></a>什么是 Babel</h3><p>Babel 是一个 javascript 编译器。主要是将 ECMAScript 2015+ 的代码转换成向后兼容的代码，或者兼容老的浏览器及环境。<br>主要有三个步骤，Babel 解析成 AST，然后插件更改 AST，最后由 Babel 输出代码</p><p>Babel 主要能做如下事情：</p><ul><li>转换语法(Transform syntax)</li><li>补充浏览器的不支持的语法 Polyfill features that are missing in your target environment (through @babel/polyfill)</li><li>源代码转换 Source code transformations (codemods)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Babel Input: ES2015 arrow <span class="keyword">function</span></span><br><span class="line">[1, 2, 3].map((n) =&gt; n + 1);</span><br><span class="line"></span><br><span class="line">// Babel Output: ES5 equivalent</span><br><span class="line">[1, 2, 3].map(<span class="keyword">function</span>(n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n + 1;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="JSX-and-React-支持"><a href="#JSX-and-React-支持" class="headerlink" title="JSX and React 支持"></a>JSX and React 支持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install --save-dev @babel/preset-react</span><br></pre></td></tr></table></figure><h3 id="flow-支持"><a href="#flow-支持" class="headerlink" title="flow 支持"></a>flow 支持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install --save-dev @babel/preset-flow</span><br></pre></td></tr></table></figure><h3 id="babel-例子"><a href="#babel-例子" class="headerlink" title="babel 例子"></a>babel 例子</h3><ol><li>首先需要安装依赖包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install --save-dev @babel/core @babel/cli @babel/preset-env</span><br><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure><ol start="2"><li>在更目录下新建一个 babel.config.json<br>下面的内容可以根据需求修改，presets 是预先设置包含一系列插件，plugins 是单个插件可以只针对某个语法编译。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"targets"</span>: &#123;</span><br><span class="line">          <span class="string">"edge"</span>: <span class="string">"17"</span>,</span><br><span class="line">          <span class="string">"firefox"</span>: <span class="string">"60"</span>,</span><br><span class="line">          <span class="string">"chrome"</span>: <span class="string">"67"</span>,</span><br><span class="line">          <span class="string">"safari"</span>: <span class="string">"11.1"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"useBuiltIns"</span>: <span class="string">"usage"</span>,</span><br><span class="line">        <span class="string">"corejs"</span>: <span class="string">"3.6.4"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">'@babel/plugin-transform-arrow-functions'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useBuiltIns，官方说法：when set to “usage” will practically apply the last optimization mentioned above where you only include the polyfills you need。 也就是说使用 usage，编译后的代码只会加载你代码中所需要的 polyfills</p><ol start="3"><li>运行如下代码，会编译你在 src 下的代码，并输出到 lib 目录，该命令是@babel/cli 中的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./node_modules/.bin/babel src --out-dir lib</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者指定插件</span></span><br><span class="line"></span><br><span class="line">./node_modules/.bin/babel src --out-dir lib --plugins=@babel/plugin-transform-arrow-functions</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># before</span></span><br><span class="line">Promise.resolve().finally();</span><br><span class="line"></span><br><span class="line"><span class="comment"># after</span></span><br><span class="line">require(<span class="string">"core-js/modules/es.promise.finally"</span>);</span><br><span class="line">Promise.resolve().finally();</span><br></pre></td></tr></table></figure><h3 id="babel-中的工具或插件"><a href="#babel-中的工具或插件" class="headerlink" title="babel 中的工具或插件"></a>babel 中的工具或插件</h3><blockquote><p>@babel/parser</p></blockquote><p>生成 AST，<a href="https://babeljs.io/docs/en/babel-parser" target="_blank" rel="noopener">参考</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var parser = require(<span class="string">"@babel/parser"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> v = parser.parse(<span class="string">"var a = 123;"</span>, &#123;</span><br><span class="line">  // parse <span class="keyword">in</span> strict mode and allow module declarations</span><br><span class="line">  sourceType: <span class="string">"module"</span>,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    // <span class="built_in">enable</span> jsx and flow syntax</span><br><span class="line">    // <span class="string">"jsx"</span>,</span><br><span class="line">    // <span class="string">"flow"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>除了 parse，还有如下方法：</p><ul><li>parseSync</li><li>parseAsync</li></ul><blockquote><p>@babel/core</p></blockquote><p>转换 AST</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var babel = require(<span class="string">"@babel/core"</span>);</span><br><span class="line">babel.transform(code, options, <span class="keyword">function</span>(err, result) &#123;</span><br><span class="line">  result; // =&gt; &#123; code, map, ast &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://babeljs.io/docs/en/options" target="_blank" rel="noopener">options</a></p><p>除了 transform，还有如下方法</p><ul><li>transformAsync</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">babel.transformAsync(<span class="string">"code();"</span>, options).<span class="keyword">then</span>(result =&gt; &#123;</span><br><span class="line">  result.code;</span><br><span class="line">  result.map;</span><br><span class="line">  result.ast;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>transformSync</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var result = babel.transformSync(<span class="string">"code();"</span>, options);</span><br><span class="line">result.code;</span><br><span class="line">result.map;</span><br><span class="line">result.ast;</span><br></pre></td></tr></table></figure><ul><li>transformFile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">babel.transformFile(<span class="string">"filename.js"</span>, options, <span class="keyword">function</span> (err, result) &#123;</span><br><span class="line">  result; // =&gt; &#123; code, map, ast &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>transformFileSync<br>babel.transformFileSync(“filename.js”, options).code;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>transformFileAsync<br>babel.transformFileAsync(“filename.js”, options).then(result =&gt; {<br>result.code;<br>});</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>transformFromAst</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const sourceCode = <span class="string">"if (true) return;"</span>;</span><br><span class="line">const parsedAst = babel.parse(sourceCode, &#123; parserOpts: &#123; allowReturnOutsideFunction: <span class="literal">true</span> &#125; &#125;);</span><br><span class="line">babel.transformFromAst(parsedAst, sourceCode, options, <span class="keyword">function</span>(err, result) &#123;</span><br><span class="line">  const &#123; code, map, ast &#125; = result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>transformFromAstSync</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const sourceCode = <span class="string">"if (true) return;"</span>;</span><br><span class="line">const parsedAst = babel.parse(sourceCode, &#123; parserOpts: &#123; allowReturnOutsideFunction: <span class="literal">true</span> &#125; &#125;);</span><br><span class="line">const &#123; code, map, ast &#125; = babel.transformFromAstSync(parsedAst, sourceCode, options);</span><br></pre></td></tr></table></figure><ul><li>transformFromAstAsync</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const sourceCode = <span class="string">"if (true) return;"</span>;</span><br><span class="line">babel.parseAsync(sourceCode, &#123; parserOpts: &#123; allowReturnOutsideFunction: <span class="literal">true</span> &#125; &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(parsedAst =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> babel.transformFromAstAsync(parsedAst, sourceCode, options);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>((&#123; code, map, ast &#125;) =&gt; &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>@babel/generator</p></blockquote><p>注意如过要以 nodejs 运行，import 会提示 unexpected identifier，需要安装 babel-node，使用 babel-node idnex.js 来运行<br>生成目标代码，<a href="https://babeljs.io/docs/en/babel-generator" target="_blank" rel="noopener">参考</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/generator</span><br><span class="line"></span><br><span class="line">import &#123;parse&#125; from <span class="string">'@babel/parser'</span>;</span><br><span class="line">import generate from <span class="string">'@babel/generator'</span>;</span><br><span class="line"></span><br><span class="line">const code = <span class="string">'class Example &#123;&#125;'</span>;</span><br><span class="line">const ast = parse(code);</span><br><span class="line"></span><br><span class="line">const output = generate(ast, &#123; /* options */ &#125;, code);</span><br></pre></td></tr></table></figure><p>多个文件用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123;parse&#125; from <span class="string">'@babel/parser'</span>;</span><br><span class="line">import generate from <span class="string">'@babel/generator'</span>;</span><br><span class="line"></span><br><span class="line">const a = <span class="string">'var a = 1;'</span>;</span><br><span class="line">const b = <span class="string">'var b = 2;'</span>;</span><br><span class="line">const astA = parse(a, &#123; sourceFilename: <span class="string">'a.js'</span> &#125;);</span><br><span class="line">const astB = parse(b, &#123; sourceFilename: <span class="string">'b.js'</span> &#125;);</span><br><span class="line">const ast = &#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'Program'</span>,</span><br><span class="line">  body: [].concat(astA.program.body, astB.program.body)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const &#123; code, map &#125; = generate(ast, &#123; sourceMaps: <span class="literal">true</span> &#125;, &#123;</span><br><span class="line">  <span class="string">'a.js'</span>: a,</span><br><span class="line">  <span class="string">'b.js'</span>: b</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>@babel/code-frame</p></blockquote><p>标记指定开始位置和结束位置内的代码，<a href="https://babeljs.io/docs/en/babel-code-frame" target="_blank" rel="noopener">参考</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#123; codeFrameColumns &#125; from <span class="string">'@babel/code-frame'</span>;</span><br><span class="line"></span><br><span class="line">const rawLines = `class Foo &#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">"hello"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;`;</span><br><span class="line">const location = &#123; start: &#123; line: 2, column: 17 &#125;, end: &#123; line: 4, column: 3 &#125; &#125;;</span><br><span class="line"></span><br><span class="line">const result = codeFrameColumns(rawLines, location, &#123; /* options */ &#125;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>打印如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  1 | class Foo &#123;</span><br><span class="line">&gt; 2 |   <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">    |                 ^</span><br><span class="line">&gt; 3 |     console.log(<span class="string">"hello"</span>);</span><br><span class="line">    | ^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">&gt; 4 |   &#125;</span><br><span class="line">    | ^^^</span><br><span class="line">  5 | &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>@babel/template</p></blockquote><p>自定义生成模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install --save-dev @babel/template</span><br><span class="line"></span><br><span class="line">import template from <span class="string">"@babel/template"</span>;</span><br><span class="line">import generate from <span class="string">"@babel/generator"</span>;</span><br><span class="line">import * as t from <span class="string">"@babel/types"</span>;</span><br><span class="line"></span><br><span class="line">const buildRequire = template(`</span><br><span class="line">  var %%importName%% = require(%%<span class="built_in">source</span>%%);</span><br><span class="line">`);</span><br><span class="line">const ast = buildRequire(&#123;</span><br><span class="line">  importName: t.identifier(<span class="string">"myModule"</span>),</span><br><span class="line">  <span class="built_in">source</span>: t.stringLiteral(<span class="string">"my-module"</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">const buildRequire = template(`</span><br><span class="line">  var IMPORT_NAME = require(SOURCE);</span><br><span class="line">`);</span><br><span class="line"></span><br><span class="line">const ast = buildRequire(&#123;</span><br><span class="line">  IMPORT_NAME: t.identifier(<span class="string">"myModule"</span>),</span><br><span class="line">  SOURCE: t.stringLiteral(<span class="string">"my-module"</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(generate(ast).code);</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">var myModule = require(<span class="string">"my-module"</span>);</span><br><span class="line"></span><br><span class="line">const ast = template.ast(`</span><br><span class="line">  var myModule = require(<span class="string">"my-module"</span>);</span><br><span class="line">`);</span><br></pre></td></tr></table></figure><blockquote><p>@babel/traverse</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">和 babel-parser 一起工作，遍历 AST</span><br><span class="line"></span><br><span class="line">import * as parser from <span class="string">"@babel/parser"</span>;</span><br><span class="line">import traverse from <span class="string">"@babel/traverse"</span>;</span><br><span class="line"></span><br><span class="line">const code = `<span class="keyword">function</span> square(n) &#123;</span><br><span class="line">  <span class="built_in">return</span> n * n;</span><br><span class="line">&#125;`;</span><br><span class="line"></span><br><span class="line">const ast = parser.parse(code);</span><br><span class="line"></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.isIdentifier(&#123; name: <span class="string">"n"</span> &#125;)) &#123;</span><br><span class="line">      path.node.name = <span class="string">"x"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> babel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>optimize</title>
      <link href="/2020/07/23/optimize/"/>
      <url>/2020/07/23/optimize/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用配置</title>
      <link href="/2020/07/23/nginx/"/>
      <url>/2020/07/23/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Nginx"><a href="#什么是-Nginx" class="headerlink" title="什么是 Nginx"></a>什么是 Nginx</h2><p>Nginx (engine x) 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。</p><blockquote><p>优点</p></blockquote><ul><li>跨平台，安装都很简单</li><li>反向代理的配置</li><li>配置负载均衡方便</li><li>处理静态文件，索引文件以及自动索引;打开文件描述符缓冲。</li><li>轻松配置 SSL， gzip，限流，授权</li></ul><blockquote><p>Nginx 常用命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./nginx -v 查看 nginx 版本</span><br><span class="line">./nginx -V 查看 nginx 的编译版本及配置的参数</span><br><span class="line">./nginx -t 主要验证 nginx.conf 配置文件是否有问题</span><br><span class="line">./nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf 根据配置文件的位置启动 nginx</span><br><span class="line">./nginx -s reload 重新加载配置文件</span><br><span class="line">./nginx -s stop 强制停止</span><br><span class="line">./nginx -s quit 优雅</span><br></pre></td></tr></table></figure><br><blockquote><p>Nginx 常用配置</p></blockquote><h5 id="一个站点配置多个域名"><a href="#一个站点配置多个域名" class="headerlink" title="一个站点配置多个域名"></a>一个站点配置多个域名</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name aaa.cn bbb.cn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一个服务配置多个站点"><a href="#一个服务配置多个站点" class="headerlink" title="一个服务配置多个站点"></a>一个服务配置多个站点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name aaa.cn;</span><br><span class="line">  location / &#123;</span><br><span class="line">    root /home/project/pa;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name bbb.cn ccc.cn;</span><br><span class="line">  location / &#123;</span><br><span class="line">    root /home/project/pb;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name ddd.cn;</span><br><span class="line">  location / &#123;</span><br><span class="line">    root /home/project/pc;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态资源缓存"><a href="#静态资源缓存" class="headerlink" title="静态资源缓存"></a>静态资源缓存</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(?:js|css|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$ &#123;</span><br><span class="line">  expires 7d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ .*\.(?:htm|html)$ &#123;</span><br><span class="line">  add_header Cache-Control <span class="string">"private, no-store, no-cache, must-revalidate, proxy-revalidate"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Gzip-配置"><a href="#Gzip-配置" class="headerlink" title="Gzip 配置"></a>Gzip 配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  gzip on;</span><br><span class="line"></span><br><span class="line">  gzip_disable <span class="string">"MSIE [1-6]\.(?!.*SV1)"</span>;  <span class="comment">#禁用条件</span></span><br><span class="line"></span><br><span class="line">  gzip_min_length 10k; <span class="comment">#设置允许压缩的页面最小字节数; 这里表示如果文件小于10个字节，就不用压缩，因为没有意义，本来就很小.</span></span><br><span class="line"></span><br><span class="line">  gzip_comp_level 6; <span class="comment">#设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快; 这里表示压缩级别，可以是0到9中的任一个，级别越高，压缩就越小，节省了带宽资源，但同时也消耗CPU资源，所以一般折中为6</span></span><br><span class="line"></span><br><span class="line">  gzip_buffers 16 8k; <span class="comment">#设置压缩缓冲区大小，此处设置为16个8K内存作为压缩结果流缓存</span></span><br><span class="line"></span><br><span class="line">  gzip_http_version 1.1; <span class="comment">#压缩版本</span></span><br><span class="line"></span><br><span class="line">  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; <span class="comment">#制定压缩的类型,线上配置时尽可能配置多的压缩类型!</span></span><br><span class="line"></span><br><span class="line">  gzip_vary on; <span class="comment">#选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写，表示在传送数据时，给客户端说明我使用了gzip压缩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="负载均衡-配置"><a href="#负载均衡-配置" class="headerlink" title="负载均衡 配置"></a>负载均衡 配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr &#123;</span><br><span class="line">  <span class="comment">#weigth参数表示权值，权值越高被分配到的几率越大</span></span><br><span class="line">  server 0.0.0.0:88 weight=5;</span><br><span class="line">  server 0.0.0.1:80 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  include       mime.types;</span><br><span class="line">  default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">  <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">  <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">  sendfile        on;</span><br><span class="line">  <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">  keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">  upstream mysvr &#123;</span><br><span class="line">    server 0.0.0.0:88 weight=5;</span><br><span class="line">    server 0.0.0.1:80 weight=1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_types text/plain text/css application/json;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认简单配置</span></span><br><span class="line">    location / &#123;</span><br><span class="line">      root /var/html;</span><br><span class="line">      index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#负载均衡</span></span><br><span class="line">    location /html &#123;</span><br><span class="line">      proxy_pass http://mysvr;</span><br><span class="line">      root /var/demo/html;</span><br><span class="line">      index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#支持websocket</span></span><br><span class="line">    location /socket &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http://webscoket;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_connect_timeout 4s;                <span class="comment">#配置点1</span></span><br><span class="line">        proxy_read_timeout 60s;                  <span class="comment">#配置点2，如果没效，可以考虑这个时间配置长一点</span></span><br><span class="line">        proxy_send_timeout 12s;                  <span class="comment">#配置点3</span></span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">"Upgrade"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location ~ .*\.(?:js|css|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$ &#123;</span><br><span class="line">      expires 7d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /rest &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Nginx-虚拟目录-alias-和-root-目录"><a href="#Nginx-虚拟目录-alias-和-root-目录" class="headerlink" title="Nginx 虚拟目录 alias 和 root 目录"></a>Nginx 虚拟目录 alias 和 root 目录</h5><ul><li>alias 指定的目录是准确的，即 location 匹配访问的 path 目录下的文件直接是在 alias 目录下查找的；</li><li>root 指定的目录是 location 匹配访问的 path 目录的上一级目录,这个 path 目录一定要是真实存在 root 指定目录下的；</li><li>使用 alias 标签的目录块中不能使用 rewrite 的 break（具体原因不明）；另外，alias 指定的目录后面必须要加上”/“符号！！</li><li>alias 虚拟目录配置中，location 匹配的 path 目录如果后面不带”/“，那么访问的 url 地址中这个 path 目录后面加不加”/“不影响访问，访问时它会自动加上”/“；<br>但是如果 location 匹配的 path 目录后面加上”/“，那么访问的 url 地址中这个 path 目录必须要加上”/“，访问时它不会自动加上”/“。如果不加上”/“，访问就会失败！</li><li>root 目录配置中，location 匹配的 path 目录后面带不带”/“，都不会影响访问。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例一</span></span><br><span class="line">location /demo/ &#123;</span><br><span class="line">  <span class="built_in">alias</span> /home/www/demo/; <span class="comment">#访问http://xxx/demo/a.html实际指定的是/home/www/demo/a.html。注意：alias指定的目录后面必须要加上"/"，即/home/www/huan/不能改成/home/www/huan</span></span><br><span class="line">&#125;</span><br><span class="line">location /demo/ &#123;</span><br><span class="line">  root /home/www/; <span class="comment">#效果和alias一样</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#例二</span></span><br><span class="line">location /web/ &#123;</span><br><span class="line">  <span class="built_in">alias</span> /home/www/html/; <span class="comment">#访问http://x/web/ 的时候就会去/home/www/html/下寻找访问资源。root没法改，需要做软连接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.xxx.com;</span><br><span class="line">  index index.html index.php index.htm;</span><br><span class="line">  <span class="comment">#access_log /usr/local/nginx/logs/image.log;</span></span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    root /var/www/html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /haha &#123;  <span class="comment">#匹配的path目录haha不需要真实存在alias指定的目录中</span></span><br><span class="line">    <span class="built_in">alias</span> /var/haha/html/; <span class="comment">#注意结尾/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /wang &#123;    <span class="comment">#匹配的path目录wang一定要真实存在root指定的目录中（就/var/www/html下一定要有wang目录存在）</span></span><br><span class="line">    root /var/www/html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Nginx-rewrite-配置"><a href="#Nginx-rewrite-配置" class="headerlink" title="Nginx rewrite 配置"></a>Nginx rewrite 配置</h5><p>rewrite 常用正则表达式</p><table><thead><tr><th>1</th><th>. :匹配除换行符以外的任意字符</th></tr></thead><tbody><tr><td>2</td><td>? :重复 0 次或 1 次</td></tr><tr><td>3</td><td>+ :重复 1 次或更多次</td></tr><tr><td>4</td><td>* :重复 0 次或更多次</td></tr><tr><td>5</td><td>\d :匹配数字</td></tr><tr><td>6</td><td>^ :匹配字符串的开始字符</td></tr><tr><td>7</td><td>$ :匹配字符串的结束字符</td></tr><tr><td>8</td><td>{n} :重复 n 次</td></tr><tr><td>9</td><td>{n,} :重复 n 次或更多次</td></tr><tr><td>10</td><td>[c] :匹配单个字符 c</td></tr><tr><td>11</td><td>[a-z] :匹配 a-z 小写字母的任意一个</td></tr></tbody></table><p>在 rewrite 中，如果使用小括号()，那么在小括号之间匹配的内容，可以在后面通过$1来引用，$2 表示的是前面第二个()里的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例子</span></span><br><span class="line">location /download/ &#123;</span><br><span class="line">  rewrite ^(/download/.*)/media/(.*)..*$ <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.mp3 <span class="built_in">break</span>;</span><br><span class="line">  rewrite ^(/download/.*)/audio/(.*)..*$ <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.ra <span class="built_in">break</span>;</span><br><span class="line">  <span class="built_in">return</span> 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>##### 简单介绍下 Nginx 处理请求的几个主要阶段<p>nginx 处理请求一共分为 11 个阶段</p><ul><li><p>postread: #realip 模块，读取头部信息</p></li><li><p>server_rewrite: #一般没有第三方模块会处理这个阶段。</p></li><li><p>find_config: #做 location 的匹配，暂时没有模块会用到。</p></li><li><p>rewrite: #对 URL 做一些处理。</p></li><li><p>post_rewrite: #处于 REWRITE 之后，也是暂时没有模块会在这个阶段出现</p></li><li><p>preaccess: #access 之前的工作，例如并发连接和 QPS 需要进行限制, limit_conn 和 limit_req 就是在这里</p></li><li><p>access: #认证就在这里，auth_basic 用户名和密码认证, access 用户访问 ip, auth_request 第三方认证</p></li><li><p>postAccess: #access 之后做的一些事情</p></li><li><p>preContent: #try_files 模块就在这个阶段</p></li><li><p>content: #index, autoindex, concat 模块</p></li><li><p>log: #记录日志 access_log 模块</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>https介绍</title>
      <link href="/2020/07/23/https/"/>
      <url>/2020/07/23/https/</url>
      
        <content type="html"><![CDATA[<h2 id="Https-原理解析"><a href="#Https-原理解析" class="headerlink" title="Https 原理解析"></a>Https 原理解析</h2><blockquote><p>什么是 Https</p></blockquote><p>Https 是以安全的 Http 为通道， 在 Http 的基础上通过传输加密和身份认证保证了传输过程的安全性。为了保证这些隐私数据能加密传输，于是设计了 SSL（Secure Sockets Layer），随后 SSL 升级成 TLS（Transport Layer Security），不过现在仍然使用 SSL 来充当 Https 的代名词。</p><br><blockquote><p>Https 验证过程</p></blockquote><p>Https 在请求数据之前，会有几次握手，主要是用来传输证书和验证证书，以及生成加密的 Key，如下图所示</p><img src="/2020/07/23/https/1.png" class title="This is an test image"><ul><li><p>具体流程</p><ul><li><p>Client 向 Server 发起请求，默认是 443 端口，该请求会携带一些自己能支持的 Cipher Suite（密钥算法套件，简称 Cipher）</p></li><li><p>Server 收到请求，会判断是否支持这些 Cipher，不支持则连接断开，反之则会从中选出一种加密算法和 HASH 算法，以证书的形式返回给 Client 证书中还包含了 公钥 颁证机构 网址 失效日期等等。此证书就是公钥证书。</p></li><li><p>Client 收到公钥证书，会进行验证。验证内容包括：比如是否在有效期内，证书的用途是不是匹配 Client 请求的站点，是不是在 CRL 吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的 Root 证书或者 Client 内置的 Root 证书）。如果验证通过则继续，不通过则显示警告信息。</p></li><li><p>Client 生成随机秘钥，使用伪随机数生成器生成加密所使用的会话密钥，然后用用公钥证书对它进行加密，然后发给 Server</p></li><li><p>Server 端使用自己的私钥进行解密，得到会话秘钥。至此，Client 和 Server 双方都持有了相同的会话密钥。</p></li><li><p>剩下的就是，Server 使用会话密钥加密“明文内容 A”，发送给 Client。Client 使用会话密钥解密响应的密文，得到“明文内容 A”。<br>因为这串密钥只有 Client 和 Server 知道，所以即使中间请求被拦截也是没法解密数据的，以此保证了通信的安全</p></li></ul></li></ul><br><blockquote><p>Https 中间人攻击</p></blockquote><ul><li><p>Server 向 Client 发送公钥。</p></li><li><p>攻击者截获公钥，保留在自己手上。</p></li><li><p>然后攻击者自己生成一个【伪造的】公钥，发给 Client。</p></li><li><p>Client 收到伪造的公钥后，生成加密 hash 值发给 Server 。</p></li><li><p>攻击者获得加密 hash 值，用自己的私钥解密获得真秘钥。</p></li><li><p>同时生成假的加密 hash 值，发给 Server 。</p></li><li><p>Server 用私钥解密获得假秘钥。</p></li><li><p>这里就需要一个强大的公证人，就是 CA，操作系统会做 CA 证书的判断。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo命令介绍</title>
      <link href="/2020/07/23/hello-world/"/>
      <url>/2020/07/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><!-- More info: [Writing](https://hexo.io/docs/writing.html) --><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo server -p 5000</span><br><span class="line">$ hexo server -i IP地址</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
